{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "CAMRIN-CAMDASH-ADF-01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSql_CORE",
								"type": "DatasetReference"
							},
							"name": "AzureSqlCORE"
						},
						{
							"dataset": {
								"referenceName": "AzureSql_Patients",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlCOREStageStep1",
								"type": "DatasetReference"
							},
							"name": "AzureSqlCOREStageStep1"
						}
					],
					"transformations": [
						{
							"name": "AddColumns"
						},
						{
							"name": "window1"
						},
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {CRIS No} as integer,",
						"          Accession as string,",
						"          {Ref Src} as string,",
						"          {Referring Locat} as string,",
						"          Referrer as string,",
						"          Speciality as string,",
						"          GP as string,",
						"          Practice as string,",
						"          {Postcode L} as string,",
						"          {Postcode R} as string,",
						"          Site as string,",
						"          {Request Date} as timestamp,",
						"          {Event Date} as timestamp,",
						"          {Event Time} as string,",
						"          {On Call} as string,",
						"          PT as string,",
						"          RC as string,",
						"          Examination as string,",
						"          {Exam Name} as string,",
						"          Room as string,",
						"          {Start Time} as string,",
						"          {End Time} as string,",
						"          {Radiographer 1} as string,",
						"          {Radiographer 2} as string,",
						"          {Required Clinician} as string,",
						"          {Contrast Code} as string,",
						"          {Qty Used} as decimal(6,2),",
						"          {Exam Key} as integer,",
						"          {Event Key} as integer,",
						"          {Status Code} as string,",
						"          {Booked Date} as timestamp,",
						"          {Booked Time} as string,",
						"          {Creation Date} as timestamp,",
						"          Attended as string,",
						"          {Event Key2} as integer,",
						"          {Lead Clinician} as string,",
						"          {Intended Radiologist} as string,",
						"          Urg as string,",
						"          {Referring Locat Name } as string,",
						"          {Referrer Name} as string,",
						"          Modality as string,",
						"          {No of Proc} as integer,",
						"          {GP Name} as string,",
						"          {Planned Appointment Date} as timestamp,",
						"          {Date First Verified} as timestamp,",
						"          {Reported By} as string,",
						"          {Reported By2} as string,",
						"          {Reported By2 Name} as string,",
						"          {Reported By Name} as string,",
						"          {Time First Verified} as string,",
						"          {Time Taken} as integer,",
						"          {Typed By} as string,",
						"          {Was Planned} as string,",
						"          {Was Scheduled} as string,",
						"          {Was Waiting} as string,",
						"          CCG as string,",
						"          Postcode as string,",
						"          {Day of Week} as string,",
						"          {Stat Date} as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> AzureSqlCORE",
						"source(output(",
						"          {CRIS No} as integer,",
						"          {Creation Date} as timestamp,",
						"          {Mutation Date} as timestamp,",
						"          DOB as timestamp,",
						"          {Event Date} as timestamp,",
						"          DOD as timestamp,",
						"          {Ethnic Origin} as string,",
						"          GP as string,",
						"          {No of Attends} as integer,",
						"          {No of Events} as integer,",
						"          {Ref Src} as string,",
						"          {Postcode L} as string,",
						"          {Postcode R} as string,",
						"          Gender as string,",
						"          {Referrer Name} as string,",
						"          {Age at Event} as integer,",
						"          {HIS ID} as string,",
						"          CCG as string,",
						"          Postcode as string,",
						"          {Stat Date} as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"AzureSqlCORE derive({Status Code.1} = toString(null()),",
						"          {Status Date} = toString(null()),",
						"          {Status Time} = toString(null()),",
						"          {Status Time2} = lpad(toString(null()),4,\"0\"),",
						"          Modality2 = toString(null()),",
						"          {Trust Name} = toString(null()),",
						"          Patient_Type = toString(null()),",
						"          {Tat Type} = toString(null()),",
						"          Activity = toString(null()),",
						"          {Count of Activty_Demand for Activity} = toString(null()),",
						"          {ExamSite Code} = toString(null()),",
						"          {Age at Event} = toString(null())) ~> AddColumns",
						"AddColumns window(over({Exam Key}),",
						"     desc({Stat Date}, false),",
						"     Rank = denseRank()) ~> window1",
						"window1, source1 lookup(AzureSqlCORE@{CRIS No} == source1@{CRIS No}",
						"     && AzureSqlCORE@{Event Date} == source1@{Event Date},",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {CRIS No} as integer,",
						"          Accession as string,",
						"          {Ref Src} as string,",
						"          Site as string,",
						"          {Request Date} as timestamp,",
						"          {Event Date} as timestamp,",
						"          {Event Time} as string,",
						"          {On Call} as string,",
						"          PT as string,",
						"          Examination as string,",
						"          {Exam Name} as string,",
						"          Room as string,",
						"          {ExamSite Code} as string,",
						"          {Start Time} as string,",
						"          {End Time} as string,",
						"          {Exam Key} as integer,",
						"          {Event Key} as integer,",
						"          {Status Code} as string,",
						"          {Booked Date} as timestamp,",
						"          {Booked Time} as string,",
						"          {Creation Date} as timestamp,",
						"          Attended as string,",
						"          Urg as string,",
						"          Modality as string,",
						"          {No of Proc} as integer,",
						"          {Planned Appointment Date} as timestamp,",
						"          {Date First Verified} as timestamp,",
						"          {Time First Verified} as string,",
						"          {Was Planned} as string,",
						"          {Was Scheduled} as string,",
						"          {Was Waiting} as string,",
						"          {Stat Date} as timestamp,",
						"          Modality2 as string,",
						"          {Trust Name} as string,",
						"          Patient_Type as string,",
						"          {Tat Type} as string,",
						"          {Status Time} as string,",
						"          {Reported By} as string,",
						"          Rank as integer,",
						"          {Age At Event} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          {CRIS No},",
						"          Accession,",
						"          {Ref Src},",
						"          Site,",
						"          {Request Date},",
						"          {Event Date},",
						"          {Event Time},",
						"          {On Call},",
						"          PT,",
						"          Examination,",
						"          {Exam Name},",
						"          Room,",
						"          {ExamSite Code},",
						"          {Start Time},",
						"          {End Time},",
						"          {Exam Key},",
						"          {Event Key},",
						"          {Status Code},",
						"          {Booked Date},",
						"          {Booked Time},",
						"          {Creation Date},",
						"          Attended,",
						"          Urg,",
						"          Modality,",
						"          {No of Proc},",
						"          {Planned Appointment Date},",
						"          {Date First Verified},",
						"          {Time First Verified},",
						"          {Was Planned},",
						"          {Was Scheduled},",
						"          {Was Waiting},",
						"          {Stat Date},",
						"          Modality2,",
						"          {Trust Name},",
						"          Patient_Type,",
						"          {Tat Type},",
						"          {Status Time} = {Status Time2},",
						"          {Reported By},",
						"          Rank,",
						"          {Age At Event} = source1@{Age at Event}",
						"     )) ~> AzureSqlCOREStageStep1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSql_PTL",
								"type": "DatasetReference"
							},
							"name": "AzureSqlPTL"
						},
						{
							"dataset": {
								"referenceName": "Referral_Source",
								"type": "DatasetReference"
							},
							"name": "ReferralSource"
						},
						{
							"dataset": {
								"referenceName": "Exam",
								"type": "DatasetReference"
							},
							"name": "Exam"
						},
						{
							"dataset": {
								"referenceName": "Trust",
								"type": "DatasetReference"
							},
							"name": "Trust"
						},
						{
							"dataset": {
								"referenceName": "Modality",
								"type": "DatasetReference"
							},
							"name": "Modality"
						},
						{
							"dataset": {
								"referenceName": "Exam_Site",
								"type": "DatasetReference"
							},
							"name": "ExamSite"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlCOREStageStep2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSQLPTL_V3_Staging",
								"type": "DatasetReference"
							},
							"name": "AzureSqlPTLV2Staging"
						}
					],
					"transformations": [
						{
							"name": "AddColumns"
						},
						{
							"name": "SelectMostRecent"
						},
						{
							"name": "SortColumns"
						},
						{
							"name": "CreateID"
						},
						{
							"name": "RenameandRemoveCols"
						},
						{
							"name": "lookupReferralSource"
						},
						{
							"name": "lookupExam"
						},
						{
							"name": "DeriveTrust"
						},
						{
							"name": "lookupTrust"
						},
						{
							"name": "deriveModlaityCode"
						},
						{
							"name": "lookupModality"
						},
						{
							"name": "derivedEamsiteCode"
						},
						{
							"name": "lookupExamSite"
						},
						{
							"name": "RemoveCols"
						},
						{
							"name": "deriveBookedDateTime"
						},
						{
							"name": "RenameCols3"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Event Key} as integer,",
						"          {Exam Key} as integer,",
						"          {CRIS Number} as integer,",
						"          {Status Category} as string,",
						"          Referrer as string,",
						"          {Ref Src} as string,",
						"          {Referring Location} as string,",
						"          Examination as string,",
						"          Site as string,",
						"          {Request Date} as timestamp,",
						"          {Event Date} as timestamp,",
						"          {Booked Time} as string,",
						"          {Booked Date} as timestamp,",
						"          {Ref Src2} as string,",
						"          {Postcode L} as string,",
						"          {Postcode R} as string,",
						"          {Creation Date} as timestamp,",
						"          {Event Key2} as integer,",
						"          Attended as string,",
						"          Modality as string,",
						"          Room as string,",
						"          RC as string,",
						"          Urg as integer,",
						"          {Referrer Name} as string,",
						"          {Exam Name} as string,",
						"          {Event Date2} as timestamp,",
						"          {Days Waiting} as integer,",
						"          {Predicted Reset Date} as timestamp,",
						"          {Waiting Time Reset Date} as timestamp,",
						"          {Weeks Waiting} as integer,",
						"          {Planned Appointment Date} as timestamp,",
						"          {Waiting Breach Date} as timestamp,",
						"          {Was Planned} as string,",
						"          {Was Scheduled} as string,",
						"          {Was Waiting} as string,",
						"          CCG as string,",
						"          {D Status} as string,",
						"          {Stat Date} as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> AzureSqlPTL",
						"source(output(",
						"          {Referral Source} as string,",
						"          {Referral Source ID} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ReferralSource",
						"source(output(",
						"          {Exam Name} as string,",
						"          {Exam Code} as string,",
						"          {Exam ID} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Exam",
						"source(output(",
						"          {Trust Name} as string,",
						"          {Trust ID} as integer,",
						"          {Trust Name Group} as string,",
						"          {Trust Name Group2} as string,",
						"          {Trust Name Group3} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Trust",
						"source(output(",
						"          Modality2 as string,",
						"          {Modality ID} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Modality",
						"source(output(",
						"          {Exam Site} as string,",
						"          {Exam Room} as string,",
						"          {Exam Site Code} as string,",
						"          {Exam Room ID} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ExamSite",
						"source(output(",
						"          {CRIS No} as integer,",
						"          Accession as string,",
						"          {Ref Src} as string,",
						"          Site as string,",
						"          {Request Date} as date,",
						"          {Event Date} as date,",
						"          {Event Time} as string,",
						"          {On Call} as string,",
						"          PT as string,",
						"          Examination as string,",
						"          {Exam Name} as string,",
						"          Room as string,",
						"          {Start Time} as string,",
						"          {End Time} as string,",
						"          {Exam Key} as integer,",
						"          {Event Key} as integer,",
						"          {Status Code} as string,",
						"          {Booked Date} as timestamp,",
						"          {Booked Time} as string,",
						"          {Creation Date} as timestamp,",
						"          Attended as string,",
						"          Urg as string,",
						"          Modality as string,",
						"          {No of Proc} as integer,",
						"          {Planned Appointment Date} as timestamp,",
						"          {Date First Verified} as timestamp,",
						"          {Time First Verified} as string,",
						"          {Was Planned} as string,",
						"          {Was Scheduled} as string,",
						"          {Was Waiting} as string,",
						"          {Stat Date} as timestamp,",
						"          {Reported By} as string,",
						"          Rank as integer,",
						"          {Age At Event} as string,",
						"          {Status Code.2} as string,",
						"          {Status Date.1} as timestamp,",
						"          {Status Time} as string,",
						"          Modality2 as string,",
						"          {Trust Name} as string,",
						"          Patient_Type as string,",
						"          {Tat Type} as string,",
						"          {Activity.1} as integer,",
						"          {Count of Activty_Demand for Activity.1} as long,",
						"          {ExamSite Code} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"AzureSqlPTL derive({5 Weeks Wait} = iif({Weeks Waiting}>=6,1,0),",
						"          {Booked Datetime} = toString(null()),",
						"          {6 Weeks Wait} = toString(null()),",
						"          {Stat Date} = toDate({Stat Date})) ~> AddColumns",
						"CreateID filter(rank==1) ~> SelectMostRecent",
						"AddColumns sort(desc({Stat Date}, true)) ~> SortColumns",
						"SortColumns rank(desc({Stat Date}, true),",
						"     output(rank as long)) ~> CreateID",
						"SelectMostRecent select(mapColumn(",
						"          {Event Key},",
						"          {Exam Key},",
						"          {CRIS Number},",
						"          {Status Category},",
						"          {Ref Src},",
						"          Examination,",
						"          Site,",
						"          {Request Date},",
						"          {Event Date},",
						"          {Booked Time},",
						"          {Booked Date},",
						"          {Ref Src2},",
						"          {Creation Date},",
						"          Attended,",
						"          Modality,",
						"          Room,",
						"          Urg,",
						"          {Exam Name},",
						"          {Days Waiting},",
						"          {Predicted Reset Date},",
						"          {Waiting Time Reset Date},",
						"          {Weeks Waiting},",
						"          {Planned Appointment Date},",
						"          {Waiting Breach Date},",
						"          {Was Planned},",
						"          {Was Scheduled},",
						"          {Was Waiting},",
						"          {Stat Date},",
						"          {5 Weeks Wait},",
						"          {Booked Datetime},",
						"          {6 Weeks Wait}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameandRemoveCols",
						"RenameandRemoveCols, ReferralSource lookup({Ref Src} == {Referral Source},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupReferralSource",
						"lookupReferralSource, Exam lookup(Examination == {Exam Code},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupExam",
						"lookupExamSite derive(Site = iif ({Site} == \"5HA16\", \"LUHFT\", iif ({Site} == \"5NL93\", \"LUHFT\", iif (left({Site},3) == \"REM\", \"LUHFT\", iif (left({Site},3) == \"RQ6\", \"LUHFT\",  iif (left({Site},3) == \"RQ6\", \"LUHFT\", iif (left({Site},3) == \"RQ6\", \"LUHFT\", iif (left({Site},3) == \"RQ6\", \"LUHFT\", iif (left({Site},3) == \"RBL\", \"WUTH\", iif (left({Site},3) == \"RBN\", \"STHK\", iif (left({Site},3) == \"RBQ\", \"LHCH\", iif (left({Site},3) == \"RBS\", \"Alder Hey\", iif (left({Site},3) == \"RBT\", \"MCH\", iif (left({Site},3) == \"REN\", \"CCC\" , iif (left({Site},3) == \"REP\", \"Womens\", iif (left({Site},3) == \"RET\", \"TWC\", iif (left({Site},3) == \"RJR\", \"COCH\", iif (left({Site},3) == \"RVY\", \"S&O\", iif (left({Site},3) == \"RWW\", \"WHH\", {Site}))))))))))))))))))) ~> DeriveTrust",
						"DeriveTrust, Trust lookup(Site == {Trust Name},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupTrust",
						"lookupExam derive(Modality = iif({Modality} == \"R\", \"Plain X-Ray\", iif({Modality} == \"A\", \"IR\", iif({Modality} == \"B\", \"Mammo\", iif({Modality} == \"C\", \"CT\", iif({Modality} == \"M\", \"MRI\", iif({Modality} == \"F\", \"Fluoro\", iif({Modality} == \"U\", \"NOUS\", iif({Modality} == \"Z\", \"Additional Workload\", iif({Modality} == \"O\", \"Obstetrics\", iif({Modality} == \"N\", \"Nuc Med\", iif({Modality} == \"H\", \"Cardio\", iif({Modality} == \"S\", \"DEXA\", iif({Modality} == \"Y\", \"Med Phys\", iif({Modality} == \"E\", \"Endo\", iif({Modality} == \"D\", \"Doppler\", \"other\")))))))))))))))) ~> deriveModlaityCode",
						"deriveModlaityCode, Modality lookup(Modality == Modality2,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupModality",
						"lookupModality derive(Room = concat({Site},{Room})) ~> derivedEamsiteCode",
						"derivedEamsiteCode, ExamSite lookup(Room == {Exam Site Code},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupExamSite",
						"lookupTrust select(mapColumn(",
						"          {Event Key},",
						"          {Exam Key},",
						"          {CRIS Number},",
						"          {Status Category},",
						"          {Request Date},",
						"          {Event Date},",
						"          {Booked Time},",
						"          {Booked Date},",
						"          {Creation Date},",
						"          Attended,",
						"          Urg,",
						"          {Days Waiting},",
						"          {Predicted Reset Date},",
						"          {Waiting Time Reset Date},",
						"          {Weeks Waiting},",
						"          {Planned Appointment Date},",
						"          {Waiting Breach Date},",
						"          {Was Planned},",
						"          {Was Scheduled},",
						"          {Was Waiting},",
						"          {Stat Date},",
						"          {5 Weeks Wait},",
						"          {Booked Datetime},",
						"          {6 Weeks Wait},",
						"          {Referral Source ID},",
						"          {Exam ID},",
						"          {Modality ID},",
						"          {Exam Room ID},",
						"          {Trust ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveCols",
						"RemoveCols derive({Booked Date} = toTimestamp(concatWS(\" \", left(toString({Booked Date}),10), concatWS(\":\",left({Booked Time}, 2), concatWS(\":\",right({Booked Time}, 2),\"00\"))))) ~> deriveBookedDateTime",
						"lookup1 select(mapColumn(",
						"          {Event Key} = RemoveCols@{Event Key},",
						"          {Exam Key} = RemoveCols@{Exam Key},",
						"          {CRIS Number},",
						"          {Status Category},",
						"          {Request Date} = RemoveCols@{Request Date},",
						"          {Event Date} = RemoveCols@{Event Date},",
						"          {Booked Date Time} = deriveBookedDateTime@{Booked Date},",
						"          {Creation Date} = RemoveCols@{Creation Date},",
						"          Attended = RemoveCols@Attended,",
						"          Urg = RemoveCols@Urg,",
						"          {Days Waiting},",
						"          {Predicted Reset Date},",
						"          {Waiting Time Reset Date},",
						"          {Weeks Waiting},",
						"          {Planned Appointment Date} = RemoveCols@{Planned Appointment Date},",
						"          {Waiting Breach Date},",
						"          {Was Planned} = RemoveCols@{Was Planned},",
						"          {Was Scheduled} = RemoveCols@{Was Scheduled},",
						"          {Was Waiting} = RemoveCols@{Was Waiting},",
						"          {Stat Date} = RemoveCols@{Stat Date},",
						"          {5 Weeks Wait},",
						"          {Booked Datetime},",
						"          {6 Weeks Wait},",
						"          {Referral Source ID},",
						"          {Exam ID},",
						"          {Modality ID},",
						"          {Exam Room ID},",
						"          {Trust ID},",
						"          {Status Code}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameCols3",
						"deriveBookedDateTime, filter1 lookup(RemoveCols@{Exam Key} == source1@{Exam Key},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"source1 filter(Rank==1) ~> filter1",
						"RenameCols3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AzureSqlPTLV2Staging"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSQLPTL_V4_Staging",
								"type": "DatasetReference"
							},
							"name": "AzureSqlCOREV3Staging"
						},
						{
							"dataset": {
								"referenceName": "AzureSql_PTL",
								"type": "DatasetReference"
							},
							"name": "AzureSqlPTL"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Tat_Type",
								"type": "DatasetReference"
							},
							"name": "TatType"
						},
						{
							"dataset": {
								"referenceName": "Trust",
								"type": "DatasetReference"
							},
							"name": "Trust"
						},
						{
							"dataset": {
								"referenceName": "Exam_Site",
								"type": "DatasetReference"
							},
							"name": "sink4"
						},
						{
							"dataset": {
								"referenceName": "Modality",
								"type": "DatasetReference"
							},
							"name": "Modality"
						},
						{
							"dataset": {
								"referenceName": "Status",
								"type": "DatasetReference"
							},
							"name": "Status"
						},
						{
							"dataset": {
								"referenceName": "Exam",
								"type": "DatasetReference"
							},
							"name": "Exam"
						},
						{
							"dataset": {
								"referenceName": "Patient_Type",
								"type": "DatasetReference"
							},
							"name": "PatientType"
						},
						{
							"dataset": {
								"referenceName": "Referral_Source",
								"type": "DatasetReference"
							},
							"name": "ReferralSource"
						}
					],
					"transformations": [
						{
							"name": "RenameColumns8"
						},
						{
							"name": "RemoveDupes8"
						},
						{
							"name": "RankColumns8"
						},
						{
							"name": "DropColumns8"
						},
						{
							"name": "DeriveColumn8"
						},
						{
							"name": "RenameColumns7"
						},
						{
							"name": "RemoveDupes7"
						},
						{
							"name": "DropColumns7"
						},
						{
							"name": "RankColumns7"
						},
						{
							"name": "DeriveColumn7"
						},
						{
							"name": "RenameColumns6"
						},
						{
							"name": "RemoveDupes6"
						},
						{
							"name": "DropColumns6"
						},
						{
							"name": "JointColumn6"
						},
						{
							"name": "RankColumns6"
						},
						{
							"name": "RenameColumns5"
						},
						{
							"name": "RemoveDupes5"
						},
						{
							"name": "DropColumns5"
						},
						{
							"name": "RankColumns5"
						},
						{
							"name": "RenameColumns4"
						},
						{
							"name": "RemoveDupes4"
						},
						{
							"name": "DropColumns4"
						},
						{
							"name": "RankColumns4"
						},
						{
							"name": "DeriveColumn4"
						},
						{
							"name": "RenameColumns3"
						},
						{
							"name": "RemoveDupes3"
						},
						{
							"name": "DropColumns3"
						},
						{
							"name": "RankColumns3"
						},
						{
							"name": "RenameColumns2"
						},
						{
							"name": "RemoveDupes2"
						},
						{
							"name": "DropColumns2"
						},
						{
							"name": "RankColumns2"
						},
						{
							"name": "RenameColumns1"
						},
						{
							"name": "RemoveDupes1"
						},
						{
							"name": "DropColumns1"
						},
						{
							"name": "RankColumns1"
						},
						{
							"name": "SortColumns1"
						},
						{
							"name": "SortColumns2"
						},
						{
							"name": "SortColumns3"
						},
						{
							"name": "SortColumns4"
						},
						{
							"name": "SortColumns5"
						},
						{
							"name": "SortColumns6",
							"description": "Sorting rows on columns 'Exam Room ID'"
						},
						{
							"name": "SortColumns7"
						},
						{
							"name": "SortColumns8"
						},
						{
							"name": "RenameColumns9"
						},
						{
							"name": "CombineCOREPTL6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {CRIS No} as integer,",
						"          Accession as string,",
						"          {Ref Src} as string,",
						"          Site as string,",
						"          {Request Date} as date,",
						"          {Event Date} as date,",
						"          {Event Time} as string,",
						"          {On Call} as string,",
						"          PT as string,",
						"          Examination as string,",
						"          {Exam Name} as string,",
						"          Room as string,",
						"          {Start Time} as string,",
						"          {End Time} as string,",
						"          {Exam Key} as integer,",
						"          {Event Key} as integer,",
						"          {Status Code} as string,",
						"          {Booked Date} as timestamp,",
						"          {Booked Time} as string,",
						"          {Creation Date} as timestamp,",
						"          Attended as string,",
						"          Urg as string,",
						"          Modality as string,",
						"          {No of Proc} as integer,",
						"          {Age At Event} as integer,",
						"          {Planned Appointment Date} as timestamp,",
						"          {Date First Verified} as timestamp,",
						"          {Time First Verified} as string,",
						"          {Was Planned} as string,",
						"          {Was Scheduled} as string,",
						"          {Was Waiting} as string,",
						"          {Stat Date} as timestamp,",
						"          {Reported By} as string,",
						"          Rank as integer,",
						"          {Status Code.2} as string,",
						"          {Status Date.1} as timestamp,",
						"          {Status Time} as string,",
						"          Modality2 as string,",
						"          {Trust Name} as string,",
						"          Patient_Type as string,",
						"          {Tat Type} as string,",
						"          {Activity.1} as integer,",
						"          {Count of Activty_Demand for Activity.1} as long,",
						"          {ExamSite Code} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> AzureSqlCOREV3Staging",
						"source(output(",
						"          {Event Key} as integer,",
						"          {Exam Key} as integer,",
						"          {CRIS Number} as integer,",
						"          {Status Category} as string,",
						"          Referrer as string,",
						"          {Ref Src} as string,",
						"          {Referring Location} as string,",
						"          Examination as string,",
						"          Site as string,",
						"          {Request Date} as timestamp,",
						"          {Event Date} as timestamp,",
						"          {Booked Time} as string,",
						"          {Booked Date} as timestamp,",
						"          {Ref Src2} as string,",
						"          {Postcode L} as string,",
						"          {Postcode R} as string,",
						"          {Creation Date} as timestamp,",
						"          {Event Key2} as integer,",
						"          Attended as string,",
						"          Modality as string,",
						"          Room as string,",
						"          RC as string,",
						"          Urg as integer,",
						"          {Referrer Name} as string,",
						"          {Exam Name} as string,",
						"          {Event Date2} as timestamp,",
						"          {Days Waiting} as integer,",
						"          {Predicted Reset Date} as timestamp,",
						"          {Waiting Time Reset Date} as timestamp,",
						"          {Weeks Waiting} as integer,",
						"          {Planned Appointment Date} as timestamp,",
						"          {Waiting Breach Date} as timestamp,",
						"          {Was Planned} as string,",
						"          {Was Scheduled} as string,",
						"          {Was Waiting} as string,",
						"          CCG as string,",
						"          {D Status} as string,",
						"          {Stat Date} as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> AzureSqlPTL",
						"AzureSqlCOREV3Staging select(mapColumn(",
						"          {Tat Type}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumns8",
						"RenameColumns8 aggregate(groupBy({Tat Type}),",
						"     First = first({Tat Type})) ~> RemoveDupes8",
						"DropColumns8 rank(asc({Tat Type}, true),",
						"     output({Tat Type ID} as long),",
						"     dense: true) ~> RankColumns8",
						"RemoveDupes8 select(mapColumn(",
						"          {Tat Type}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropColumns8",
						"RankColumns8 derive(Target = iif({Tat Type} == \"Urgent Inpatients\",\"12 hours\",iif({Tat Type} == \"Non-Urgent Inpatients\", \"24 hours\",iif({Tat Type} == \"Outpatient Faster Diagnosis Standard Cancer Pathway\", \"3 days\",iif({Tat Type} == \"Urgent GP and Outpatients\", \"7 days\",iif({Tat Type} == \"All Other Routine Outpatient and GP Studies\", \"28 days\",iif({Tat Type} == \"Acutely Unwell/ED Patients\", \"12 hours\",iif({Tat Type} == \"Other Inpatients\" , \"7 days\",iif({Tat Type} == \"Urgent GP/Urgent Outpatients\", \"7 days\",iif({Tat Type} == \"Routine GP and outpatients\", \"28 days\",iif({Tat Type} == \"Ultrasound and interventional Radiology\", \"3 hours\",\"0\"))))))))))) ~> DeriveColumn8",
						"AzureSqlCOREV3Staging select(mapColumn(",
						"          {Trust Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumns7",
						"RenameColumns7 aggregate(groupBy({Trust Name}),",
						"     First = first({Trust Name})) ~> RemoveDupes7",
						"RemoveDupes7 select(mapColumn(",
						"          {Trust Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropColumns7",
						"DropColumns7 rank(asc({Trust Name}, true),",
						"     output({Trust ID} as long),",
						"     dense: true) ~> RankColumns7",
						"RankColumns7 derive({Trust Name Group} = iif( {Trust Name} == \"Womens\", \"REP\", iif( {Trust Name} == \"LUHFT\", \"REM\", iif( {Trust Name} == \"WUTH\", \"RBL\", iif( {Trust Name} == \"STHK\", \"RBN\", iif( {Trust Name} == \"S&O\", \"RVY\", iif( {Trust Name} == \"LHCH\", \"RBQ\", iif( {Trust Name} == \"Alder Hey\", \"RBS\", iif( {Trust Name} == \"MCH\", \"RBT\", iif( {Trust Name} == \"CCC\", \"REN\", iif( {Trust Name} == \"TWC\", \"RET\", iif( {Trust Name} == \"COCH\", \"RJR\", iif( {Trust Name} == \"WHH\", \"RWW\", iif( {Trust Name} == \"5M501\", \"REM\", iif( {Trust Name} == \"NTD05\", \"REM\", \"Other\")))))))))))))),",
						"          {Trust Name Group2} = iif( {Trust Name} == \"Womens\", \"Womens\", iif( {Trust Name} == \"LUHFT\", \"LUHFT\", iif( {Trust Name} == \"WUTH\", \"WUTH\", iif( {Trust Name} == \"STHK\", \"STHK\", iif( {Trust Name} == \"S&O\", \"S&O\", iif( {Trust Name} == \"LHCH\", \"LHCH\", iif( {Trust Name} == \"Alder Hey\", \"Alder Hey\", iif( {Trust Name} == \"MCH\", \"MCH\", iif( {Trust Name} == \"CCC\", \"CCC\", iif( {Trust Name} == \"TWC\", \"TWC\", iif( {Trust Name} == \"COCH\", \"COCH\", iif( {Trust Name} == \"WHH\", \"WHH\", iif( {Trust Name} == \"5M501\", \"LUHFT\", iif( {Trust Name} == \"NTD05\", \"LUHFT\", \"Other\")))))))))))))),",
						"          {Trust Name Group3} = iif( {Trust Name} == \"Womens\", \"REP\", iif( {Trust Name} == \"LUHFT\", \"REM\", iif( {Trust Name} == \"WUTH\", \"WUTH\", iif( {Trust Name} == \"STHK\", \"RBN\", iif( {Trust Name} == \"S&O\", \"RVY\", iif( {Trust Name} == \"LHCH\", \"RBQ\", iif( {Trust Name} == \"Alder Hey\", \"RBS\", iif( {Trust Name} == \"MCH\", \"RBT\", iif( {Trust Name} == \"CCC\", \"REN\", iif( {Trust Name} == \"TWC\", \"RET\", iif( {Trust Name} == \"COCH\", \"COCH\", iif( {Trust Name} == \"WHH\", \"RWW\", \"Other\"))))))))))))) ~> DeriveColumn7",
						"AzureSqlCOREV3Staging select(mapColumn(",
						"          {Exam Site} = Site,",
						"          {Exam Room} = Room",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumns6",
						"CombineCOREPTL6 aggregate(groupBy({Exam Site},",
						"          {Exam Room}),",
						"     First = first({Exam Room})) ~> RemoveDupes6",
						"RemoveDupes6 select(mapColumn(",
						"          {Exam Site},",
						"          {Exam Room}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropColumns6",
						"DropColumns6 derive({ExamSite Code} = iifNull({Exam Site},'\\n',{Exam Site})+iifNull({Exam Room},'\\n',{Exam Room})) ~> JointColumn6",
						"JointColumn6 rank(asc({ExamSite Code}, true),",
						"     output({Exam Room ID} as long)) ~> RankColumns6",
						"AzureSqlCOREV3Staging select(mapColumn(",
						"          Modality2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumns5",
						"RenameColumns5 aggregate(groupBy(Modality2),",
						"     First = first({Modality2})) ~> RemoveDupes5",
						"RemoveDupes5 select(mapColumn(",
						"          Modality2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropColumns5",
						"DropColumns5 rank(asc(Modality2, true),",
						"     output({Modality ID} as long)) ~> RankColumns5",
						"AzureSqlCOREV3Staging select(mapColumn(",
						"          {Status Code}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumns4",
						"RenameColumns4 aggregate(groupBy({Status Code}),",
						"     First = first({Status Code})) ~> RemoveDupes4",
						"RemoveDupes4 select(mapColumn(",
						"          {Status Code}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropColumns4",
						"DropColumns4 rank(asc({Status Code}, true),",
						"     output({Status ID} as long)) ~> RankColumns4",
						"RankColumns4 derive({Status Category} = iif(startsWith({Status Code}, \"AP\"), \"AP\", iif(startsWith({Status Code}, \"AS\"), \"AS\", iif(startsWith({Status Code}, \"AT\"), \"AT\", iif(startsWith({Status Code}, \"C\"), \"C\", iif(startsWith({Status Code}, \"D\"), \"D\", iif(startsWith({Status Code}, \"E\"), \"E\", iif(startsWith({Status Code}, \"P\"), \"P\", iif(startsWith({Status Code}, \"R\"), \"R\", iif(startsWith({Status Code}, \"V\"), \"V\", iif(startsWith({Status Code}, \"W\"), \"W\", iif({Status Code} == \"BHSRAI\", \"ST\", iif({Status Code} == \"ACNCLI\", \"W\", iif({Status Code} == \"SRREPC\", \"ST\", \"0\")))))))))))))) ~> DeriveColumn4",
						"AzureSqlCOREV3Staging select(mapColumn(",
						"          {Exam Code} = Examination,",
						"          {Exam Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumns3",
						"RenameColumns3 aggregate(groupBy({Exam Code},",
						"          {Exam Name}),",
						"     first = first({Exam Code})) ~> RemoveDupes3",
						"RemoveDupes3 select(mapColumn(",
						"          {Exam Code},",
						"          {Exam Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropColumns3",
						"DropColumns3 rank(asc({Exam Code}, true),",
						"     output({Exam ID} as long)) ~> RankColumns3",
						"AzureSqlCOREV3Staging select(mapColumn(",
						"          Patient_Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumns2",
						"RenameColumns2 aggregate(groupBy(Patient_Type),",
						"     first = first({Patient_Type})) ~> RemoveDupes2",
						"RemoveDupes2 select(mapColumn(",
						"          Patient_Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropColumns2",
						"DropColumns2 rank(asc(Patient_Type, true),",
						"     output({Patient Type ID} as long)) ~> RankColumns2",
						"AzureSqlCOREV3Staging select(mapColumn(",
						"          {Referral Source} = {Ref Src}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumns1",
						"RenameColumns1 aggregate(groupBy({Referral Source}),",
						"     first = first({Referral Source})) ~> RemoveDupes1",
						"RemoveDupes1 select(mapColumn(",
						"          {Referral Source}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropColumns1",
						"DropColumns1 rank(asc({Referral Source}, true),",
						"     output({Referral Source ID} as long)) ~> RankColumns1",
						"RankColumns1 sort(asc({Referral Source ID}, true)) ~> SortColumns1",
						"RankColumns2 sort(asc({Patient Type ID}, true)) ~> SortColumns2",
						"RankColumns3 sort(asc({Exam ID}, true)) ~> SortColumns3",
						"DeriveColumn4 sort(asc({Status ID}, true)) ~> SortColumns4",
						"RankColumns5 sort(asc({Modality ID}, true)) ~> SortColumns5",
						"RankColumns6 sort(asc({Exam Room ID}, true)) ~> SortColumns6",
						"DeriveColumn7 sort(asc({Trust ID}, true)) ~> SortColumns7",
						"DeriveColumn8 sort(asc({Tat Type ID}, true)) ~> SortColumns8",
						"AzureSqlPTL select(mapColumn(",
						"          {Exam Site} = Site,",
						"          {Exam Room} = Room",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumns9",
						"RenameColumns6, RenameColumns9 union(byName: true)~> CombineCOREPTL6",
						"SortColumns8 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Tat Type} as string,",
						"          {Tat Type ID} as integer,",
						"          Target as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TatType",
						"SortColumns7 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Trust Name} as string,",
						"          {Trust ID} as integer,",
						"          {Trust Name Group} as string,",
						"          {Trust Name Group2} as string,",
						"          {Trust Name Group3} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> Trust",
						"SortColumns6 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Exam Site} as string,",
						"          {Exam Room} as string,",
						"          {Exam Site Code} as string,",
						"          {Exam Room ID} as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink4",
						"SortColumns5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Modality2 as string,",
						"          {Modality ID} as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> Modality",
						"SortColumns4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Status Code} as string,",
						"          {Status ID} as integer,",
						"          {Status Category} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> Status",
						"SortColumns3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Exam Name} as string,",
						"          {Exam Code} as string,",
						"          {Exam ID} as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> Exam",
						"SortColumns2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Patient_Type as string,",
						"          Patient_Type_ID as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> PatientType",
						"SortColumns1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Referral Source} as string,",
						"          {Referral Source ID} as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ReferralSource"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlCOREStageStep2",
								"type": "DatasetReference"
							},
							"name": "AzureSQLCoreV3Staging"
						},
						{
							"dataset": {
								"referenceName": "Patient_Type",
								"type": "DatasetReference"
							},
							"name": "PatientType"
						},
						{
							"dataset": {
								"referenceName": "Modality",
								"type": "DatasetReference"
							},
							"name": "Modality"
						},
						{
							"dataset": {
								"referenceName": "Status",
								"type": "DatasetReference"
							},
							"name": "Status"
						},
						{
							"dataset": {
								"referenceName": "Exam",
								"type": "DatasetReference"
							},
							"name": "Exam"
						},
						{
							"dataset": {
								"referenceName": "Exam_Site",
								"type": "DatasetReference"
							},
							"name": "ExamSite"
						},
						{
							"dataset": {
								"referenceName": "Trust",
								"type": "DatasetReference"
							},
							"name": "Trust"
						},
						{
							"dataset": {
								"referenceName": "Referral_Source",
								"type": "DatasetReference"
							},
							"name": "ReferralSource"
						},
						{
							"dataset": {
								"referenceName": "Tat_Type",
								"type": "DatasetReference"
							},
							"name": "TatType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FYF_ODBC_CORE_v2",
								"type": "DatasetReference"
							},
							"name": "AzureSqlCOREV2"
						}
					],
					"transformations": [
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "MapDrifted2",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "RemoveColumns6"
						},
						{
							"name": "MapDrifted3",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "RemoveColumns1"
						},
						{
							"name": "RemoveColumns2"
						},
						{
							"name": "RemoveColumns3"
						},
						{
							"name": "RemoveColumns4"
						},
						{
							"name": "select6"
						},
						{
							"name": "RemoveColumns5"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "RenameColumn"
						},
						{
							"name": "LookupPatientType"
						},
						{
							"name": "lookupModality"
						},
						{
							"name": "lookupStatus"
						},
						{
							"name": "lookupExam"
						},
						{
							"name": "lookupExamSite"
						},
						{
							"name": "lookup6"
						},
						{
							"name": "lookupReferralSource"
						},
						{
							"name": "lookupTatType"
						},
						{
							"name": "RenameColumn2"
						},
						{
							"name": "MapDrifted4",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "MapDrifted5",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {CRIS No} as integer,",
						"          Accession as string,",
						"          {Ref Src} as string,",
						"          Site as string,",
						"          {Request Date} as date,",
						"          {Event Date} as date,",
						"          {Event Time} as string,",
						"          {On Call} as string,",
						"          PT as string,",
						"          Examination as string,",
						"          {Exam Name} as string,",
						"          Room as string,",
						"          {Start Time} as string,",
						"          {End Time} as string,",
						"          {Exam Key} as integer,",
						"          {Event Key} as integer,",
						"          {Status Code} as string,",
						"          {Booked Date} as timestamp,",
						"          {Booked Time} as string,",
						"          {Creation Date} as timestamp,",
						"          Attended as string,",
						"          Urg as string,",
						"          Modality as string,",
						"          {No of Proc} as integer,",
						"          {Planned Appointment Date} as timestamp,",
						"          {Date First Verified} as timestamp,",
						"          {Time First Verified} as string,",
						"          {Was Planned} as string,",
						"          {Was Scheduled} as string,",
						"          {Was Waiting} as string,",
						"          {Stat Date} as timestamp,",
						"          {Reported By} as string,",
						"          Rank as integer,",
						"          {Age At Event} as string,",
						"          {Status Code.2} as string,",
						"          {Status Date.1} as timestamp,",
						"          {Status Time} as string,",
						"          Modality2 as string,",
						"          {Trust Name} as string,",
						"          Patient_Type as string,",
						"          {Tat Type} as string,",
						"          {Activity.1} as integer,",
						"          {Count of Activty_Demand for Activity.1} as long,",
						"          {ExamSite Code} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> AzureSQLCoreV3Staging",
						"source(output(",
						"          Patient_Type as string,",
						"          Patient_Type_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PatientType",
						"source(output(",
						"          Modality2 as string,",
						"          {Modality ID} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Modality",
						"source(output(",
						"          {Status Code} as string,",
						"          {Status ID} as integer,",
						"          {Status Category} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Status",
						"source(output(",
						"          {Exam Name} as string,",
						"          {Exam Code} as string,",
						"          {Exam ID} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Exam",
						"source(output(",
						"          {Exam Site} as string,",
						"          {Exam Room} as string,",
						"          {Exam Site Code} as string,",
						"          {Exam Room ID} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ExamSite",
						"source(output(",
						"          {Trust Name} as string,",
						"          {Trust ID} as integer,",
						"          {Trust Name Group} as string,",
						"          {Trust Name Group2} as string,",
						"          {Trust Name Group3} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Trust",
						"source(output(",
						"          {Referral Source} as string,",
						"          {Referral Source ID} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ReferralSource",
						"source(output(",
						"          {Tat Type} as string,",
						"          {Tat Type ID} as integer,",
						"          Target as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TatType",
						"LookupPatientType derive({Patient Type ID} = toLong(byName('Patient Type ID'))) ~> MapDrifted1",
						"ExamSite derive({ExamSite Code} = toString(byName('ExamSite Code'))) ~> MapDrifted2",
						"lookupTatType select(mapColumn(",
						"          {CRIS No},",
						"          Accession,",
						"          {Ref Src},",
						"          Site,",
						"          {Request Date},",
						"          {Event Date},",
						"          {Event Time},",
						"          {On Call},",
						"          PT,",
						"          Examination,",
						"          {Exam Name},",
						"          Room,",
						"          {ExamSite Code},",
						"          {Start Time},",
						"          {End Time},",
						"          {Exam Key},",
						"          {Event Key},",
						"          {Status Code},",
						"          {Booked Date},",
						"          {Booked Time},",
						"          {Creation Date},",
						"          Attended,",
						"          Urg,",
						"          Modality,",
						"          {No of Proc},",
						"          {Planned Appointment Date},",
						"          {Date First Verified},",
						"          {Time First Verified},",
						"          {Was Planned},",
						"          {Was Scheduled},",
						"          {Was Waiting},",
						"          {Status Time},",
						"          Modality2,",
						"          {Trust Name},",
						"          Patient_Type,",
						"          {Tat Type} = RemoveColumns5@{Tat Type},",
						"          {Status Time2},",
						"          {Patient Type ID},",
						"          {Modality ID},",
						"          {Status ID},",
						"          {Exam ID},",
						"          {Exam Room ID},",
						"          {Trust ID},",
						"          {Referral Source ID},",
						"          {Tat Type ID},",
						"          {Reported By},",
						"          Rank,",
						"          {Status Code} = {Status Code.2},",
						"          {Status Date} = {Status Date.1},",
						"          Activity = {Activity.1},",
						"          {Count of Activty_Demand for Activity} = {Count of Activty_Demand for Activity.1},",
						"          {Stat Date},",
						"          {Age At Event}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns6",
						"PatientType derive({Patient Type ID} = toLong(byName('Patient Type ID'))) ~> MapDrifted3",
						"MapDrifted5 select(mapColumn(",
						"          {CRIS No},",
						"          Accession,",
						"          {Ref Src},",
						"          Site,",
						"          {Request Date},",
						"          {Event Date},",
						"          {Event Time},",
						"          {On Call},",
						"          PT,",
						"          Examination,",
						"          {Exam Name},",
						"          Room,",
						"          {ExamSite Code},",
						"          {Start Time},",
						"          {End Time},",
						"          {Exam Key},",
						"          {Event Key},",
						"          {Status Code},",
						"          {Booked Date},",
						"          {Booked Time},",
						"          {Creation Date},",
						"          Attended,",
						"          Urg,",
						"          Modality,",
						"          {No of Proc},",
						"          {Planned Appointment Date},",
						"          {Date First Verified},",
						"          {Time First Verified},",
						"          {Was Planned},",
						"          {Was Scheduled},",
						"          {Was Waiting},",
						"          {Stat Date},",
						"          {Status Time},",
						"          Modality2,",
						"          {Trust Name},",
						"          Patient_Type = AzureSQLCoreV3Staging@Patient_Type,",
						"          {Tat Type},",
						"          {Status Time2},",
						"          {Patient Type ID},",
						"          {Reported By},",
						"          Rank,",
						"          {Status Code.2},",
						"          {Status Date.1},",
						"          {Activity.1},",
						"          {Count of Activty_Demand for Activity.1},",
						"          {Stat Date},",
						"          {Age At Event}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
						"lookupStatus select(mapColumn(",
						"          {CRIS No},",
						"          Accession,",
						"          {Ref Src},",
						"          Site,",
						"          {Request Date},",
						"          {Event Date},",
						"          {Event Time},",
						"          {On Call},",
						"          PT,",
						"          Examination,",
						"          {Exam Name},",
						"          Room,",
						"          {ExamSite Code},",
						"          {Start Time},",
						"          {End Time},",
						"          {Exam Key},",
						"          {Event Key},",
						"          {Status Code} = RemoveColumns1@{Status Code},",
						"          {Booked Date},",
						"          {Booked Time},",
						"          {Creation Date},",
						"          Attended,",
						"          Urg,",
						"          Modality,",
						"          {No of Proc},",
						"          {Planned Appointment Date},",
						"          {Date First Verified},",
						"          {Time First Verified},",
						"          {Was Planned},",
						"          {Was Scheduled},",
						"          {Was Waiting},",
						"          {Stat Date},",
						"          {Status Time},",
						"          Modality2 = RemoveColumns1@Modality2,",
						"          {Trust Name},",
						"          Patient_Type,",
						"          {Tat Type},",
						"          {Status Time2},",
						"          {Patient Type ID},",
						"          {Modality ID},",
						"          {Status ID},",
						"          {Reported By},",
						"          Rank,",
						"          {Status Code.2},",
						"          {Status Date.1},",
						"          {Activity.1},",
						"          {Count of Activty_Demand for Activity.1},",
						"          {Stat Date},",
						"          {Age At Event}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns2",
						"lookupExam select(mapColumn(",
						"          {CRIS No},",
						"          Accession,",
						"          {Ref Src},",
						"          Site,",
						"          {Request Date},",
						"          {Event Date},",
						"          {Event Time},",
						"          {On Call},",
						"          PT,",
						"          Examination,",
						"          {Exam Name} = RemoveColumns2@{Exam Name},",
						"          Room,",
						"          {ExamSite Code},",
						"          {Start Time},",
						"          {End Time},",
						"          {Exam Key},",
						"          {Event Key},",
						"          {Status Code},",
						"          {Booked Date},",
						"          {Booked Time},",
						"          {Creation Date},",
						"          Attended,",
						"          Urg,",
						"          Modality,",
						"          {No of Proc},",
						"          {Planned Appointment Date},",
						"          {Date First Verified},",
						"          {Time First Verified},",
						"          {Was Planned},",
						"          {Was Scheduled},",
						"          {Was Waiting},",
						"          {Status Time},",
						"          Modality2,",
						"          {Trust Name},",
						"          Patient_Type,",
						"          {Tat Type},",
						"          {Status Time2},",
						"          {Patient Type ID},",
						"          {Modality ID},",
						"          {Status ID},",
						"          {Exam ID},",
						"          {Reported By},",
						"          Rank,",
						"          {Status Code.2},",
						"          {Status Date.1},",
						"          {Activity.1},",
						"          {Count of Activty_Demand for Activity.1},",
						"          {Stat Date},",
						"          {Age At Event}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns3",
						"lookupExamSite select(mapColumn(",
						"          {CRIS No},",
						"          Accession,",
						"          {Ref Src},",
						"          Site,",
						"          {Request Date},",
						"          {Event Date},",
						"          {Event Time},",
						"          {On Call},",
						"          PT,",
						"          Examination,",
						"          {Exam Name},",
						"          Room,",
						"          {ExamSite Code} = RemoveColumns3@{ExamSite Code},",
						"          {Start Time},",
						"          {End Time},",
						"          {Exam Key},",
						"          {Event Key},",
						"          {Status Code},",
						"          {Booked Date},",
						"          {Booked Time},",
						"          {Creation Date},",
						"          Attended,",
						"          Urg,",
						"          Modality,",
						"          {No of Proc},",
						"          {Planned Appointment Date},",
						"          {Date First Verified},",
						"          {Time First Verified},",
						"          {Was Planned},",
						"          {Was Scheduled},",
						"          {Was Waiting},",
						"          {Status Time},",
						"          Modality2,",
						"          {Trust Name},",
						"          Patient_Type,",
						"          {Tat Type},",
						"          {Status Time2},",
						"          {Patient Type ID},",
						"          {Modality ID},",
						"          {Status ID},",
						"          {Exam ID},",
						"          {Exam Room ID},",
						"          {Reported By},",
						"          Rank,",
						"          {Status Code.2},",
						"          {Status Date.1},",
						"          {Activity.1},",
						"          {Count of Activty_Demand for Activity.1},",
						"          {Stat Date},",
						"          {Age At Event}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns4",
						"lookup6 select(mapColumn(",
						"          {CRIS No},",
						"          Accession,",
						"          {Ref Src},",
						"          Site,",
						"          {Request Date},",
						"          {Event Date},",
						"          {Event Time},",
						"          {On Call},",
						"          PT,",
						"          Examination,",
						"          {Exam Name},",
						"          Room,",
						"          {ExamSite Code},",
						"          {Start Time},",
						"          {End Time},",
						"          {Exam Key},",
						"          {Event Key},",
						"          {Status Code},",
						"          {Booked Date},",
						"          {Booked Time},",
						"          {Creation Date},",
						"          Attended,",
						"          Urg,",
						"          Modality,",
						"          {No of Proc},",
						"          {Planned Appointment Date},",
						"          {Date First Verified},",
						"          {Time First Verified},",
						"          {Was Planned},",
						"          {Was Scheduled},",
						"          {Was Waiting},",
						"          {Status Time},",
						"          Modality2,",
						"          {Trust Name} = RemoveColumns4@{Trust Name},",
						"          Patient_Type,",
						"          {Tat Type},",
						"          {Status Time2},",
						"          {Patient Type ID},",
						"          {Modality ID},",
						"          {Status ID},",
						"          {Exam ID},",
						"          {Exam Room ID},",
						"          {Trust ID},",
						"          {Reported By},",
						"          Rank,",
						"          {Status Code.2},",
						"          {Status Date.1},",
						"          {Activity.1},",
						"          {Count of Activty_Demand for Activity.1},",
						"          {Stat Date},",
						"          {Age At Event}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"lookupReferralSource select(mapColumn(",
						"          {CRIS No},",
						"          Accession,",
						"          {Ref Src},",
						"          Site,",
						"          {Request Date},",
						"          {Event Date},",
						"          {Event Time},",
						"          {On Call},",
						"          PT,",
						"          Examination,",
						"          {Exam Name},",
						"          Room,",
						"          {ExamSite Code},",
						"          {Start Time},",
						"          {End Time},",
						"          {Exam Key},",
						"          {Event Key},",
						"          {Status Code},",
						"          {Booked Date},",
						"          {Booked Time},",
						"          {Creation Date},",
						"          Attended,",
						"          Urg,",
						"          Modality,",
						"          {No of Proc},",
						"          {Planned Appointment Date},",
						"          {Date First Verified},",
						"          {Time First Verified},",
						"          {Was Planned},",
						"          {Was Scheduled},",
						"          {Was Waiting},",
						"          {Status Time},",
						"          Modality2,",
						"          {Trust Name},",
						"          Patient_Type,",
						"          {Tat Type},",
						"          {Status Time2},",
						"          {Patient Type ID},",
						"          {Modality ID},",
						"          {Status ID},",
						"          {Exam ID},",
						"          {Exam Room ID},",
						"          {Trust ID},",
						"          {Referral Source ID},",
						"          {Reported By},",
						"          Rank,",
						"          {Status Code.2},",
						"          {Status Date.1},",
						"          {Activity.1},",
						"          {Count of Activty_Demand for Activity.1},",
						"          {Stat Date},",
						"          {Age At Event}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns5",
						"MapDrifted4 derive({Status Time2} = lpad(toString({Status Time}),4,\"0\")) ~> DerivedColumn1",
						"MapDrifted3 select(mapColumn(",
						"          Patient_Type,",
						"          {Patient Type ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumn",
						"DerivedColumn1, RenameColumn lookup(AzureSQLCoreV3Staging@Patient_Type == RenameColumn@Patient_Type,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupPatientType",
						"RemoveColumns1, Modality lookup(RemoveColumns1@Modality2 == Modality@Modality2,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupModality",
						"lookupModality, Status lookup(RemoveColumns1@{Status Code} == Status@{Status Code},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupStatus",
						"RemoveColumns2, Exam lookup(Examination == {Exam Code},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupExam",
						"RemoveColumns3, MapDrifted2 lookup(RemoveColumns3@{ExamSite Code} == MapDrifted2@{ExamSite Code},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupExamSite",
						"RemoveColumns4, Trust lookup(RemoveColumns4@{Trust Name} == Trust@{Trust Name},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup6",
						"select6, ReferralSource lookup({Ref Src} == {Referral Source},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupReferralSource",
						"RemoveColumns5, TatType lookup(RemoveColumns5@{Tat Type} == TatType@{Tat Type},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupTatType",
						"MapDrifted2 select(mapColumn(",
						"          {Exam Site},",
						"          {Exam Room},",
						"          {Exam Room ID},",
						"          {ExamSite Code}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumn2",
						"filter1 derive({Reported By} = toString(byName('Reported By'))) ~> MapDrifted4",
						"MapDrifted1 derive({Reported By} = toString(byName('Reported By'))) ~> MapDrifted5",
						"AzureSQLCoreV3Staging filter(Rank==1) ~> filter1",
						"RemoveColumns6 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {CRIS No} as integer,",
						"          Accession as string,",
						"          {Ref Src} as string,",
						"          Site as string,",
						"          {Request Date} as date,",
						"          {Event Date} as date,",
						"          {Event Time} as string,",
						"          {On Call} as string,",
						"          PT as string,",
						"          Examination as string,",
						"          {Exam Name} as string,",
						"          Room as string,",
						"          {ExamSite Code} as string,",
						"          {Start Time} as string,",
						"          {End Time} as string,",
						"          {Exam Key} as integer,",
						"          {Event Key} as integer,",
						"          {Status Code} as string,",
						"          {Booked Date} as timestamp,",
						"          {Booked Time} as string,",
						"          {Creation Date} as timestamp,",
						"          Attended as string,",
						"          Urg as string,",
						"          Modality as string,",
						"          {No of Proc} as integer,",
						"          {Planned Appointment Date} as timestamp,",
						"          {Date First Verified} as timestamp,",
						"          {Time First Verified} as string,",
						"          {Was Planned} as string,",
						"          {Was Scheduled} as string,",
						"          {Was Waiting} as string,",
						"          {Status Time} as string,",
						"          Modality2 as string,",
						"          {Trust Name} as string,",
						"          Patient_Type as string,",
						"          {Tat Type} as string,",
						"          {Status Time2} as string,",
						"          {Patient Type ID} as long,",
						"          {Modality ID} as integer,",
						"          {Status ID} as integer,",
						"          {Exam ID} as integer,",
						"          {Exam Room ID} as integer,",
						"          {Trust ID} as integer,",
						"          {Referral Source ID} as integer,",
						"          {Tat Type ID} as integer,",
						"          {Reported By} as string,",
						"          Rank as integer,",
						"          {Status Date} as timestamp,",
						"          Activity as integer,",
						"          {Count of Activty_Demand for Activity} as long,",
						"          {Stat Date} as timestamp,",
						"          {Age At Event} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          {CRIS No},",
						"          Accession,",
						"          {Ref Src},",
						"          Site,",
						"          {Request Date},",
						"          {Event Date},",
						"          {Event Time},",
						"          {On Call},",
						"          PT,",
						"          Examination,",
						"          {Exam Name},",
						"          Room,",
						"          {ExamSite Code},",
						"          {Start Time},",
						"          {End Time},",
						"          {Exam Key},",
						"          {Event Key},",
						"          {Status Code},",
						"          {Booked Date},",
						"          {Booked Time},",
						"          {Creation Date},",
						"          Attended,",
						"          Urg,",
						"          Modality,",
						"          {No of Proc},",
						"          {Planned Appointment Date},",
						"          {Date First Verified},",
						"          {Time First Verified},",
						"          {Was Planned},",
						"          {Was Scheduled},",
						"          {Was Waiting},",
						"          {Status Time},",
						"          Modality2,",
						"          {Trust Name},",
						"          Patient_Type,",
						"          {Tat Type},",
						"          {Status Time2},",
						"          {Patient Type ID},",
						"          {Modality ID},",
						"          {Status ID},",
						"          {Exam ID},",
						"          {Exam Room ID},",
						"          {Trust ID},",
						"          {Referral Source ID},",
						"          {Tat Type ID},",
						"          {Reported By},",
						"          Rank,",
						"          {Status Date},",
						"          Activity,",
						"          {Count of Activty_Demand for Activity},",
						"          {Stat Date},",
						"          {Age At Event}",
						"     )) ~> AzureSqlCOREV2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSql_STATUSES",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RequestRecievedStatus",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to Request Received Status"
						}
					],
					"transformations": [
						{
							"name": "window1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Exam Key} as integer,",
						"          {Event Key} as integer,",
						"          Accession as string,",
						"          Referrer as string,",
						"          {Referral Location} as string,",
						"          {Referral Source} as string,",
						"          Urg as string,",
						"          Site as string,",
						"          {Status Code} as string,",
						"          {Status Date} as timestamp,",
						"          {Status Time} as integer,",
						"          {Referral Location Name} as string,",
						"          {Referral Source Name} as string,",
						"          {Referral Name} as string,",
						"          {Examination Name} as string,",
						"          Modality as string,",
						"          {Status Code at State Date} as string,",
						"          {Stat Date} as timestamp,",
						"          {D Status} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"filter1 window(over({Exam Key}),",
						"     desc({Status Date}, false),",
						"     desc({Status Time}, false),",
						"     asc({Status Code at State Date}, false),",
						"     asc(Referrer, true),",
						"     asc({Referral Location}, true),",
						"     asc({Referral Source}, true),",
						"     asc(Urg, true),",
						"     asc(Site, true),",
						"     asc({Referral Location Name}, true),",
						"     asc({Referral Source Name}, true),",
						"     asc({Referral Name}, true),",
						"     asc({Examination Name}, true),",
						"     asc(Modality, true),",
						"     asc({Stat Date}, true),",
						"     asc({D Status}, true),",
						"     Rank = denseRank()) ~> window1",
						"source1 filter({Status Code}==\"RR\") ~> filter1",
						"window1 filter(Rank==1) ~> filter2",
						"filter2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Exam Key} as integer,",
						"          {Event Key} as integer,",
						"          Accession as string,",
						"          Referrer as string,",
						"          {Referral Location} as string,",
						"          {Referral Source} as string,",
						"          Urg as string,",
						"          Site as string,",
						"          {Status Code} as string,",
						"          {Status Date} as timestamp,",
						"          {Status Time} as integer,",
						"          {Referral Location Name} as string,",
						"          {Referral Source Name} as string,",
						"          {Referral Name} as string,",
						"          {Examination Name} as string,",
						"          Modality as string,",
						"          {Status Code at State Date} as string,",
						"          {Stat Date} as timestamp,",
						"          {D Status} as string,",
						"          Rank as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow5')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSQLCoreV3Staging",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSQLCoreV3Staging",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {CRIS No} as integer,",
						"          Accession as string,",
						"          {Ref Src} as string,",
						"          Site as string,",
						"          {Request Date} as date,",
						"          {Event Date} as date,",
						"          {Event Time} as string,",
						"          {On Call} as string,",
						"          PT as string,",
						"          Examination as string,",
						"          {Exam Name} as string,",
						"          Room as string,",
						"          {ExamSite Code} as string,",
						"          {Start Time} as string,",
						"          {End Time} as string,",
						"          {Exam Key} as integer,",
						"          {Event Key} as integer,",
						"          {Status Code} as string,",
						"          {Booked Date} as timestamp,",
						"          {Booked Time} as string,",
						"          {Creation Date} as timestamp,",
						"          Attended as string,",
						"          Urg as string,",
						"          Modality as string,",
						"          {No of Proc} as integer,",
						"          {Age At Event} as integer,",
						"          {Planned Appointment Date} as timestamp,",
						"          {Date First Verified} as timestamp,",
						"          {Time First Verified} as string,",
						"          {Was Planned} as string,",
						"          {Was Scheduled} as string,",
						"          {Was Waiting} as string,",
						"          {Stat Date} as timestamp,",
						"          Modality2 as string,",
						"          {Trust Name} as string,",
						"          Patient_Type as string,",
						"          {Tat Type} as string,",
						"          {Status Time} as string,",
						"          {Reported By} as string,",
						"          Rank as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 filter({Exam Key}==26213771) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {CRIS No} as integer,",
						"          Accession as string,",
						"          {Ref Src} as string,",
						"          Site as string,",
						"          {Request Date} as date,",
						"          {Event Date} as date,",
						"          {Event Time} as string,",
						"          {On Call} as string,",
						"          PT as string,",
						"          Examination as string,",
						"          {Exam Name} as string,",
						"          Room as string,",
						"          {ExamSite Code} as string,",
						"          {Start Time} as string,",
						"          {End Time} as string,",
						"          {Exam Key} as integer,",
						"          {Event Key} as integer,",
						"          {Status Code} as string,",
						"          {Booked Date} as timestamp,",
						"          {Booked Time} as string,",
						"          {Creation Date} as timestamp,",
						"          Attended as string,",
						"          Urg as string,",
						"          Modality as string,",
						"          {No of Proc} as integer,",
						"          {Planned Appointment Date} as timestamp,",
						"          {Date First Verified} as timestamp,",
						"          {Time First Verified} as string,",
						"          {Was Planned} as string,",
						"          {Was Scheduled} as string,",
						"          {Was Waiting} as string,",
						"          {Stat Date} as timestamp,",
						"          Modality2 as string,",
						"          {Trust Name} as string,",
						"          Patient_Type as string,",
						"          {Tat Type} as string,",
						"          {Status Time} as string,",
						"          {Reported By} as string,",
						"          Rank as integer,",
						"          {Age At Event} as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow6')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "FYF_ODBC_CORE_v2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "testtable2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "testtable1",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "AIDF",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter3"
						},
						{
							"name": "select3"
						},
						{
							"name": "join2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {CRIS No} as integer,",
						"          Accession as string,",
						"          {Ref Src} as string,",
						"          Site as string,",
						"          {Request Date} as date,",
						"          {Event Date} as date,",
						"          {Event Time} as string,",
						"          {On Call} as string,",
						"          PT as string,",
						"          Examination as string,",
						"          {Exam Name} as string,",
						"          Room as string,",
						"          {ExamSite Code} as string,",
						"          {Start Time} as string,",
						"          {End Time} as string,",
						"          {Exam Key} as integer,",
						"          {Event Key} as integer,",
						"          {Status Code} as string,",
						"          {Booked Date} as timestamp,",
						"          {Booked Time} as string,",
						"          {Creation Date} as timestamp,",
						"          Attended as string,",
						"          Urg as string,",
						"          Modality as string,",
						"          {No of Proc} as integer,",
						"          {Planned Appointment Date} as timestamp,",
						"          {Date First Verified} as timestamp,",
						"          {Time First Verified} as string,",
						"          {Was Planned} as string,",
						"          {Was Scheduled} as string,",
						"          {Was Waiting} as string,",
						"          {Status Time} as string,",
						"          Modality2 as string,",
						"          {Trust Name} as string,",
						"          Patient_Type as string,",
						"          {Tat Type} as string,",
						"          {Status Time2} as string,",
						"          {Patient Type ID} as long,",
						"          {Modality ID} as integer,",
						"          {Status ID} as integer,",
						"          {Exam ID} as integer,",
						"          {Exam Room ID} as integer,",
						"          {Trust ID} as integer,",
						"          {Referral Source ID} as integer,",
						"          {Tat Type ID} as integer,",
						"          {Reported By} as string,",
						"          Rank as integer,",
						"          {Status Date} as timestamp,",
						"          Activity as integer,",
						"          {Count of Activty_Demand for Activity} as long,",
						"          {Stat Date} as timestamp,",
						"          {Age At Event} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 filter(Examination == \"XCHES\" && {Event Date} >= toDate('10/01/2022','MM/dd/yyyy') && toDate({Date First Verified}) >= toDate('10/01/2022','MM/dd/yyyy')) ~> filter1",
						"filter2 select(mapColumn(",
						"          {CRIS No},",
						"          {Event Key},",
						"          {Exam Key},",
						"          {Trust ID},",
						"          {Exam Room ID},",
						"          {Event Date},",
						"          {Date First Verified},",
						"          {Reported By},",
						"          {Patient Type ID},",
						"          {Age At Event},",
						"          {Exam ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"filter1 select(mapColumn(",
						"          {CRIS No},",
						"          {Event Key},",
						"          {Exam Key},",
						"          {Trust ID},",
						"          {Exam Room ID},",
						"          {Event Date},",
						"          {Date First Verified},",
						"          {Reported By},",
						"          {Patient Type ID},",
						"          {Age At Event},",
						"          {Exam ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(Auto = iif(instr({Reported By},\"AUTO\")!=0, 1, 0),",
						"          {Rep Rad} = iif(startsWith({Reported By},\"RA\")==true(),1,0),",
						"          Cons = iif(startsWith({Reported By},\"C\")==true(),1,0),",
						"          Outsource = iif(instr({Reported By},\"4way\")!=0,1,iif(instr({Reported By},\"EXT\")!=0,1,iif(instr({Reported By},\"4WAY\")!=0,1,0))),",
						"          {CX I-R} = toDate({Date First Verified})-{Event Date},",
						"          Snapshot = iif(isNull({Date First Verified})==false(),iif(toDate({Date First Verified})>=toDate('10/01/2023','MM/dd/yyyy'),iif({Event Date}<=toDate('10/01/2023','MM/dd/yyyy'),1,0),0),0)) ~> derivedColumn1",
						"derivedColumn1 derive(Abnormal = iif(between({CX I-R}, 0, 28)==true(),1,0)) ~> derivedColumn2",
						"source1 filter(Examination == \"CCHES\" && {Event Date} >= toDate('01/01/2022','MM/dd/yyyy') && toDate({Date First Verified}) >= toDate('01/01/2022','MM/dd/yyyy')) ~> filter2",
						"derivedColumn2, select1 join(select2@{CRIS No} == select1@{CRIS No}",
						"     && select2@{Event Date} <= select1@{Event Date}",
						"     && toDate(select2@{Date First Verified}) <= select1@{Event Date},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> join1",
						"join1 derive({CXR-CCI} = select1@{Event Date}-toDate(select2@{Date First Verified}),",
						"          {CXI-CCR} = toDate(select1@{Date First Verified})-select2@{Event Date},",
						"          {CXI-CCI} = select1@{Event Date}-select2@{Event Date}) ~> derivedColumn3",
						"select3 filter({CXR-CCI}<=28) ~> filter3",
						"derivedColumn3 select(mapColumn(",
						"          {CRIS No} = select1@{CRIS No},",
						"          {Event Key} = select1@{Event Key},",
						"          {Exam Key} = select1@{Exam Key},",
						"          {Trust ID} = select1@{Trust ID},",
						"          {Exam Room ID} = select1@{Exam Room ID},",
						"          {Event Date} = select1@{Event Date},",
						"          {Date First Verified} = select1@{Date First Verified},",
						"          {Reported By} = select1@{Reported By},",
						"          {Patient Type ID} = select1@{Patient Type ID},",
						"          {Age At Event} = select1@{Age At Event},",
						"          {Exam ID} = select1@{Exam ID},",
						"          {CXR-CCI},",
						"          {CXI-CCR},",
						"          {CXI-CCI}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"derivedColumn2, filter3 join(select2@{CRIS No} == select3@{CRIS No}",
						"     && select2@{Event Date} <= select3@{Event Date}",
						"     && toDate(select2@{Date First Verified}) <= select3@{Event Date},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> join2",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2",
						"join2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {CRIS No} as integer,",
						"          {Event Key} as integer,",
						"          {Exam Key} as integer,",
						"          {Trust ID} as integer,",
						"          {Exam Room ID} as integer,",
						"          {Event Date} as date,",
						"          {Date First Verified} as timestamp,",
						"          {Reported By} as string,",
						"          {Patient Type ID} as long,",
						"          {Age At Event} as string,",
						"          {Exam ID} as integer,",
						"          Auto as integer,",
						"          {Rep Rad} as integer,",
						"          Cons as integer,",
						"          Outsource as integer,",
						"          {CX I-R} as integer,",
						"          Snapshot as integer,",
						"          Abnormal as integer,",
						"          {CRIS No.1} as integer,",
						"          {Event Key.1} as integer,",
						"          {Exam Key.1} as integer,",
						"          {Trust ID.1} as integer,",
						"          {Exam Room ID.1} as integer,",
						"          {Event Date.1} as date,",
						"          {Date First Verified.1} as timestamp,",
						"          {Reported By.1} as string,",
						"          {Patient Type ID.1} as long,",
						"          {Age At Event.1} as string,",
						"          {Exam ID.1} as integer,",
						"          {CXR-CCI.1} as integer,",
						"          {CXI-CCR.1} as integer,",
						"          {CXI-CCI.1} as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink3"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ingestion_RADFYF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_CORE",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "24:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [dev].[FYF_ODBC_CORE]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CRIS No",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CRIS No",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Accession",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Accession",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Ref Src",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Ref Src",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referring Locat",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referring Locat",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referrer",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referrer",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Speciality",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Speciality",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "GP",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "GP",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Practice",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Practice",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Site",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Request Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Request Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Event Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Event Time",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "On Call",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "On Call",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PT",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "PT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RC",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RC",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Examination",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Examination",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Exam Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Exam Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Start Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Start Time",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "End Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "End Time",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Radiographer 1",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Radiographer 1",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Radiographer 2",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Radiographer 2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Required Clinician",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Required Clinician",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Contrast Code",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Contrast Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Qty Used",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 6
										},
										"sink": {
											"name": "Qty Used",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 6
										}
									},
									{
										"source": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Status Code",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Status Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Booked Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Booked Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Booked Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Booked Time",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Creation Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Creation Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Attended",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Attended",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Event Key2",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Event Key2",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Lead Clinician",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Lead Clinician",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Intended Radiologist",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Intended Radiologist",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Urg",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Urg",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referring Locat Name ",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referring Locat Name ",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referrer Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referrer Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Modality",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Modality",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "No of Proc",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "No of Proc",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "GP Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "GP Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Planned Appointment Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Planned Appointment Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Date First Verified",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Date First Verified",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Reported By",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reported By",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Reported By2",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reported By2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Reported By2 Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reported By2 Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Reported By Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reported By Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Time First Verified",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Time First Verified",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Time Taken",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Time Taken",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Typed By",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Typed By",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Was Planned",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Was Planned",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Was Scheduled",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Was Scheduled",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Was Waiting",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Was Waiting",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CCG",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CCG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Day of Week",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Day of Week",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServer_CORE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSql_CORE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy_ORDERS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy_CORE",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "24:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [dev].[FYF_ODBC_ORDERS]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CRIS No",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CRIS No",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Order Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Order Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Creation Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Creation Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Ref Src",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Ref Src",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referrer",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referrer",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Lead Clinician",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Lead Clinician",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Required Date",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Required Date",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Required Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Required Time",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Order Id",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Order Id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Order Source",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Order Source",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Episode No",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Episode No",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Order Type",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Order Type",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Examination",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Examination",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Urg",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Urg",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServer_ORDERS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSql_ORDERS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy_REQUESTS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy_ORDERS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "24:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [dev].[FYF_ODBC_REQUESTS]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Accession",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Accession",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Urg",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Urg",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Ref Src",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Ref Src",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referring Locat",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referring Locat",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referrer",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referrer",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Lead Clinician",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Lead Clinician",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Site",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Request Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Request Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Event Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Event Time",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "On Call",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "On Call",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PT",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "PT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RC",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RC",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Examination",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Examination",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Examination Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Examination Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Required Clinician",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Required Clinician",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Status Code",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Status Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Booked Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Booked Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Booked Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Booked Time",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Event Key2",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Event Key2",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Creation Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Creation Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Attended",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Attended",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referrer Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referrer Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Modality",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Modality",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Event Date at Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Event Date at Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Predicted Reset Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Predicted Reset Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Waiting Time Reset Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Waiting Time Reset Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Planned Appointment Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Planned Appointment Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Waiting Time Breach Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Waiting Time Breach Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServer_REQUESTS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSql_REQUESTS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy_STATUSES",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy_REQUESTS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "24:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [dev].[FYF_ODBC_STATUSES]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Accession",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Accession",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referrer",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referrer",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referral Location",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referral Location",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referral Source",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referral Source",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Urg",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Urg",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Site",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Status Code",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Status Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Status Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Status Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Status Time",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Status Time",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Referral Location Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referral Location Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referral Source Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referral Source Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referral Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referral Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Examination Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Examination Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Modality",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Modality",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Status Code at State Date",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Status Code at State Date",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "D Status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "D Status",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServer_STATUSES",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSql_STATUSES",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy_APDNA",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lastest status",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "24:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [dev].[FYF_ODBC_APDNA]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Accession",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Accession",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Booked Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Booked Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Referring Locat",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referring Locat",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Examination",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Examination",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Status Code",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Status Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Lead Clincian ",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Lead Clincian ",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Examination Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Examination Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServer_APDNA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSql_APDNA",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy_Imports",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy_APDNA",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "24:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [dev].[FYF_ODBC_IMPORTS]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Site",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Room Description",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Room Description",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_Imports",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy_LUNGCa",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy_Imports",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "24:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [dev].[FYF_ODBC_LUNG_Ca_ALERTS]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Event key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Event key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Exam key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Exam key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Site",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Examination",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Examination",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Date Verified",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date Verified",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Date Last Verified",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date Last Verified",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Reported by",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reported by",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referral Source",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referral Source",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referring Location",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referring Location",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Date Reported",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date Reported",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServer_LUNGCA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSql_LUNGCa",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy_PATIENTS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy_LUNGCa",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "24:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "Truncate table [dev].[FYF_ODBC_PATIENTS]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CRIS No",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CRIS No",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Creation Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Creation Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Mutation Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Mutation Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "DOD",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "DOD",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Ethnic Origin",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Ethnic Origin",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "GP",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "GP",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "No of Attends",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "No of Attends",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "No of Events",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "No of Events",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Ref Src",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Ref Src",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referrer Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referrer Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Age at Event",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Age at Event",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "HIS ID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "HIS ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CCG",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CCG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServer_PATIENTS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSql_Patients",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy_PTL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy_PATIENTS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "24:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [dev].[FYF_ODBC_PTL]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CRIS Number",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CRIS Number",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Status Category",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Status Category",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referrer",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referrer",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Ref Src",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Ref Src",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referring Location",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referring Location",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Examination",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Examination",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Site",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Request Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Request Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Booked Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Booked Time",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Booked Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Booked Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Ref Src2",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Ref Src2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Creation Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Creation Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Event Key2",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Event Key2",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Attended",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Attended",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Modality",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Modality",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Room",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Room",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RC",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RC",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Urg",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Urg",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Referrer Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referrer Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Exam Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Exam Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Event Date2",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Event Date2",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Days Waiting",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Days Waiting",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Predicted Reset Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Predicted Reset Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Waiting Time Reset Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Waiting Time Reset Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Weeks Waiting",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Weeks Waiting",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Planned Appointment Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Planned Appointment Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Waiting Breach Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Waiting Breach Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Was Planned",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Was Planned",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Was Scheduled",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Was Scheduled",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Was Waiting",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Was Waiting",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CCG",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CCG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "D Status",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "D Status",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServer_PTL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSql_PTL",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy_REPORT_TAT",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy_PTL",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "24:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [dev].[FYF_ODBC_REPORTING_TAT]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Accession",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Accession",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Report Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Report Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Request Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Request Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Event Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Event Time",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Lead Clinician",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Lead Clinician",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referrer",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referrer",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Referring Locat",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referring Locat",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Site",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Site",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Examination",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Examination",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Exam Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Exam Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Event Key2",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Event Key2",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Status Code",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Status Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Intended Radiologist",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Intended Radiologist",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Ref Src",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Ref Src",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Modality",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Modality",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Date First Addended",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date First Addended",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Date First Verified",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date First Verified",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Date Last Addended",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date Last Addended",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Date LAst Verified",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date LAst Verified",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Date Reported",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date Reported",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Date Typed",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date Typed",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "First Addended By",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "First Addended By",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "First Addended by Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "First Addended by Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "First Verified By",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "First Verified By",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "First Verified By Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "First Verified By Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Last Addended By",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Last Addended By",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Last Addended By Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Last Addended By Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Last Verified By",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Last Verified By",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Last Verified By Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Last Verified By Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Reported By",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reported By",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Reported By2",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reported By2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Reported By Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reported By Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Reported By2 Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reported By2 Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "First Verified Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "First Verified Time",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Last Verified Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Last Verified Time",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Time Reported",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Time Reported",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Time Typed",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Time Typed",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Typed By",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Typed By",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Attend to First Verified Days",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Attend to First Verified Days",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Attend to Reported Days",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Attend to Reported Days",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServer_REPO_TAT",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSql_REPORT_TAT",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy_REPORT_META",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy_REPORT_TAT",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "24:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [dev].[FYF_ODBC_REPORT_META]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Report Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Report Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Event Key2",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Event Key2",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Referral Source",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Referral Source",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Event Time",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Event Time",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Date of First Addendnum",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date of First Addendnum",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Date First Verified",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date First Verified",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Date of Last Addendnum",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date of Last Addendnum",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Date Last Verified",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date Last Verified",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Date Reported",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date Reported",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Date Typed",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Date Typed",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Reported by",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reported by",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Reported by2",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reported by2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Reported by2 Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reported by2 Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Reported by Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Reported by Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Typed by",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Typed by",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Typed by Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Typed by Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServer_REPO_META",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSql_REPORT_META",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy_TEST_PATIENTS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy_REPORT_META",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "24:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [dev].[FYF_ODBC_TEST_Patients]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CRIS No",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CRIS No",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Creation Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Creation Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Mutation Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Mutation Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Surname",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Surname",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Forename",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Forename",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServer_TEST_PAT",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSql_TEST_PATIENTS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Add Columns Core",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy_TEST_PATIENTS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AzureSqlCORE": {},
									"source1": {},
									"AzureSqlCOREStageStep1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AutoResolveAzureIR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateReferrenceTables",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PopulateNewColumns",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AzureSqlCOREV3Staging": {},
									"AzureSqlPTL": {},
									"TatType": {},
									"Trust": {},
									"sink4": {},
									"Modality": {},
									"Status": {},
									"Exam": {},
									"PatientType": {},
									"ReferralSource": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ReferenceLookupsCore",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateReferrenceTables",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AzureSQLCoreV3Staging": {},
									"PatientType": {},
									"Modality": {},
									"Status": {},
									"Exam": {},
									"ExamSite": {},
									"Trust": {},
									"ReferralSource": {},
									"TatType": {},
									"AzureSqlCOREV2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ReferenceLookupsPTL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ReferenceLookupsCore",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1_copy1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AzureSqlPTL": {},
									"ReferralSource": {},
									"Exam": {},
									"Trust": {},
									"Modality": {},
									"ExamSite": {},
									"source1": {},
									"AzureSqlPTLV2Staging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "InsertPTL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ReferenceLookupsPTL",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Event Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Exam Key",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CRIS Number",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CRIS Number",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Status Category",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Status Category",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Request Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Request Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Event Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Booked Date Time",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Booked Date Time",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Creation Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Creation Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Attended",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Attended",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Urg",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Urg",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Days Waiting",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Days Waiting",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Predicted Reset Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Predicted Reset Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Waiting Time Reset Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Waiting Time Reset Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Weeks Waiting",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Weeks Waiting",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Planned Appointment Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Planned Appointment Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Waiting Breach Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Waiting Breach Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Was Planned",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Was Planned",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Was Scheduled",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Was Scheduled",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Was Waiting",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Was Waiting",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "Stat Date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "5 Weeks Wait",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "5 Weeks Wait",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Booked Datetime",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Booked Datetime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "6 Weeks Wait",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "6 Weeks Wait",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Referral Source ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Referral Source ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Exam ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Exam ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Modality ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Modality ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Exam Room ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Exam Room ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Trust ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Trust ID",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLPTL_V3_Staging",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ODBC_PTL_v2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CreateAct_Dem",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "InsertPTL",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreateActDem",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Core": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Lastest status",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy_STATUSES",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PopulateNewColumns",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [
							{
								"activity": "Add Columns Core",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PopulateNewColumns",
								"type": "DataFlowReference",
								"datasetParameters": {
									"RequestRecievedStatus": {},
									"AzureSqlCOREStageStep1": {},
									"UserQueryAzureSqlCOREStageStep2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQueryAzureSqlCOREStageStep2",
											"dataset": {
												"referenceName": "AzureSqlCOREStageStep2",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\t{CRIS No} as integer,\n\t\tAccession as string,\n\t\t{Ref Src} as string,\n\t\tSite as string,\n\t\t{Request Date} as date,\n\t\t{Event Date} as date,\n\t\t{Event Time} as string,\n\t\t{On Call} as string,\n\t\tPT as string,\n\t\tExamination as string,\n\t\t{Exam Name} as string,\n\t\tRoom as string,\n\t\t{Start Time} as string,\n\t\t{End Time} as string,\n\t\t{Exam Key} as integer,\n\t\t{Event Key} as integer,\n\t\t{Status Code} as string,\n\t\t{Booked Date} as timestamp,\n\t\t{Booked Time} as string,\n\t\t{Creation Date} as timestamp,\n\t\tAttended as string,\n\t\tUrg as string,\n\t\tModality as string,\n\t\t{No of Proc} as integer,\n\t\t{Planned Appointment Date} as timestamp,\n\t\t{Date First Verified} as timestamp,\n\t\t{Time First Verified} as string,\n\t\t{Was Planned} as string,\n\t\t{Was Scheduled} as string,\n\t\t{Was Waiting} as string,\n\t\t{Stat Date} as timestamp,\n\t\t{Reported By} as string,\n\t\tRank as integer,\n\t\t{Age At Event} as string,\n\t\t{Status Code.2} as string,\n\t\t{Status Date.1} as timestamp,\n\t\t{Status Time} as string,\n\t\tModality2 as string,\n\t\t{Trust Name} as string,\n\t\tPatient_Type as string,\n\t\t{Tat Type} as string,\n\t\t{Activity.1} as integer,\n\t\t{Count of Activty_Demand for Activity.1} as long,\n\t\t{ExamSite Code} as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> UserQueryAzureSqlCOREStageStep2"
										}
									]
								}
							]
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateAct_Dem",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow6",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "RADFYF"
				},
				"annotations": [],
				"lastPublishTime": "2024-01-30T12:35:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow3')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow1_copy1')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow4')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow6')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trig_DM01_Weekly')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Move from ICB to CAMRIN",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2023-11-23T11:22:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								23
							],
							"weekDays": [
								"Sunday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Ingestion_RADFYF",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-08-09T08:00:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Ingestion_RADFYF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Initial Bulk Upload')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Ingestion_RADFYF",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-02-01T15:11:00",
						"endTime": "2023-02-03T15:11:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Ingestion_RADFYF')]"
			]
		}
	]
}