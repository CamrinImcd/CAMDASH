{
	"name": "CreateActDem",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "FYF_ODBC_CORE_v2",
						"type": "DatasetReference"
					},
					"name": "Core"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Act_Dem",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "CreateDNAColumn"
				},
				{
					"name": "GroupbyEvent"
				},
				{
					"name": "GroupbyRequest"
				},
				{
					"name": "RenameDate1"
				},
				{
					"name": "RenameDate2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Core",
				"Core derive(DNA = iif({Status Code}==\"CPDNA\", 1, iif({Status Code}==\"APDNA\", 1, 0))) ~> CreateDNAColumn",
				"CreateDNAColumn aggregate(groupBy({Event Date},",
				"          {Modality ID},",
				"          {Trust ID}),",
				"     Activity = sum(Activity),",
				"          DNA = sum(DNA)) ~> GroupbyEvent",
				"CreateDNAColumn aggregate(groupBy({Request Date},",
				"          {Modality ID},",
				"          {Trust ID}),",
				"     Demand = count(Activity)) ~> GroupbyRequest",
				"GroupbyRequest select(mapColumn(",
				"          Date = {Request Date},",
				"          {Modality ID},",
				"          {Trust ID},",
				"          Demand",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameDate1",
				"GroupbyEvent select(mapColumn(",
				"          Date = {Event Date},",
				"          {Modality ID},",
				"          {Trust ID},",
				"          Activity,",
				"          DNA",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameDate2",
				"RenameDate1 derive(Date = toDate(toString(Date)),",
				"          ID = concat(left(toString(Date),10), concat(toString({Modality ID}), toString({Trust ID})))) ~> derivedColumn1",
				"RenameDate2 derive(Date = toDate(toString(Date)),",
				"          ID = concat(left(toString(Date),10), concat(toString({Modality ID}), toString({Trust ID})))) ~> derivedColumn2",
				"filter2, derivedColumn2 join(derivedColumn1@ID == derivedColumn2@ID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(Date = iifNull(derivedColumn1@Date,derivedColumn2@Date),",
				"          {Modality ID} = iifNull(RenameDate1@{Modality ID},RenameDate2@{Modality ID}),",
				"          {Trust ID} = iifNull(RenameDate1@{Trust ID},RenameDate2@{Trust ID}),",
				"          ID = iifNull(derivedColumn1@ID, derivedColumn2@ID)) ~> derivedColumn3",
				"derivedColumn4 select(mapColumn(",
				"          Date,",
				"          {Modality ID},",
				"          {Trust ID},",
				"          Demand,",
				"          ID,",
				"          Activity,",
				"          DNA,",
				"          Month",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn3 derive(Month = addMonths(addDays(lastDayOfMonth(Date),1),-1)) ~> derivedColumn4",
				"derivedColumn4 aggregate(groupBy({Modality ID},",
				"          {Trust ID},",
				"          Month),",
				"     {Monthly Activity Sum} = sum(Activity),",
				"          {Monthly Demand Sum} = sum(Demand)) ~> aggregate1",
				"aggregate1 aggregate(groupBy({Modality ID},",
				"          {Trust ID},",
				"          Month),",
				"     {Monthly Demand Max} = iif(max({Monthly Demand Sum})>max({Monthly Activity Sum}), max({Monthly Demand Sum}), max({Monthly Activity Sum}))) ~> aggregate2",
				"aggregate2, aggregate1 join(aggregate2@{Modality ID} == aggregate1@{Modality ID}",
				"     && aggregate2@{Trust ID} == aggregate1@{Trust ID}",
				"     && aggregate2@Month == aggregate1@Month,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"select1, select2 join(select1@{Modality ID} == select2@{Modality ID}",
				"     && select1@{Trust ID} == select2@{Trust ID}",
				"     && select1@Month == select2@Month,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join2 select(mapColumn(",
				"          {Modality ID} = aggregate2@{Modality ID},",
				"          {Trust ID} = aggregate2@{Trust ID},",
				"          Month = aggregate2@Month,",
				"          {Monthly Demand Max},",
				"          {Monthly Activity Sum},",
				"          {Monthly Demand Sum}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"join3 select(mapColumn(",
				"          Date,",
				"          {Modality ID} = select1@{Modality ID},",
				"          {Trust ID} = select1@{Trust ID},",
				"          Demand,",
				"          ID,",
				"          Activity,",
				"          DNA,",
				"          Month = select1@Month,",
				"          {Monthly Demand Max},",
				"          {Monthly Activity Sum},",
				"          {Monthly Demand Sum}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 derive(Year = year(Date),",
				"          DNARate = DNA/(Activity+DNA)) ~> derivedColumn5",
				"derivedColumn5 filter(isNull(ID)==false()) ~> filter1",
				"derivedColumn1 filter(isNull(ID)==false()) ~> filter2",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Activity as integer,",
				"          Date as date,",
				"          Demand as decimal(19,4),",
				"          ID as string,",
				"          {Modality ID} as string,",
				"          Month as string,",
				"          {Monthly Activity Sum} as integer,",
				"          {Monthly Demand Sum} as integer,",
				"          {Monthly Max} as integer,",
				"          {Trust ID} as string,",
				"          Years as string,",
				"          DNA as string,",
				"          DNARate as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Activity,",
				"          Date,",
				"          Demand,",
				"          ID,",
				"          {Modality ID},",
				"          Month,",
				"          {Monthly Activity Sum},",
				"          {Monthly Demand Sum},",
				"          {Monthly Max} = {Monthly Demand Max},",
				"          {Trust ID},",
				"          Years = Year,",
				"          DNA,",
				"          DNARate",
				"     )) ~> sink1"
			]
		}
	}
}