{
	"name": "dataflow6",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "FYF_ODBC_CORE_v2",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "testtable2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AIDF",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "filter2"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "filter3"
				},
				{
					"name": "select3"
				},
				{
					"name": "join2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {CRIS No} as integer,",
				"          Accession as string,",
				"          {Ref Src} as string,",
				"          Site as string,",
				"          {Request Date} as date,",
				"          {Event Date} as date,",
				"          {Event Time} as string,",
				"          {On Call} as string,",
				"          PT as string,",
				"          Examination as string,",
				"          {Exam Name} as string,",
				"          Room as string,",
				"          {ExamSite Code} as string,",
				"          {Start Time} as string,",
				"          {End Time} as string,",
				"          {Exam Key} as integer,",
				"          {Event Key} as integer,",
				"          {Status Code} as string,",
				"          {Booked Date} as timestamp,",
				"          {Booked Time} as string,",
				"          {Creation Date} as timestamp,",
				"          Attended as string,",
				"          Urg as string,",
				"          Modality as string,",
				"          {No of Proc} as integer,",
				"          {Planned Appointment Date} as timestamp,",
				"          {Date First Verified} as timestamp,",
				"          {Time First Verified} as string,",
				"          {Was Planned} as string,",
				"          {Was Scheduled} as string,",
				"          {Was Waiting} as string,",
				"          {Status Time} as string,",
				"          Modality2 as string,",
				"          {Trust Name} as string,",
				"          Patient_Type as string,",
				"          {Tat Type} as string,",
				"          {Status Time2} as string,",
				"          {Patient Type ID} as long,",
				"          {Modality ID} as integer,",
				"          {Status ID} as integer,",
				"          {Exam ID} as integer,",
				"          {Exam Room ID} as integer,",
				"          {Trust ID} as integer,",
				"          {Referral Source ID} as integer,",
				"          {Tat Type ID} as integer,",
				"          {Reported By} as string,",
				"          Rank as integer,",
				"          {Status Date} as timestamp,",
				"          Activity as integer,",
				"          {Count of Activty_Demand for Activity} as long,",
				"          {Stat Date} as timestamp,",
				"          {Age At Event} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source1 filter(Examination == \"XCHES\" && {Event Date} >= toDate('10/01/2022','MM/dd/yyyy') && toDate({Date First Verified}) >= toDate('10/01/2022','MM/dd/yyyy')) ~> filter1",
				"filter2 select(mapColumn(",
				"          {CRIS No},",
				"          {Event Key},",
				"          {Exam Key},",
				"          {Trust ID},",
				"          {Exam Room ID},",
				"          {Event Date},",
				"          {Date First Verified},",
				"          {Reported By},",
				"          {Patient Type ID},",
				"          {Age At Event},",
				"          {Exam ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"filter1 select(mapColumn(",
				"          {CRIS No},",
				"          {Event Key},",
				"          {Exam Key},",
				"          {Trust ID},",
				"          {Exam Room ID},",
				"          {Event Date},",
				"          {Date First Verified},",
				"          {Reported By},",
				"          {Patient Type ID},",
				"          {Age At Event},",
				"          {Exam ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(Auto = iif(instr({Reported By},\"AUTO\")!=0, 1, 0),",
				"          {Rep Rad} = iif(startsWith({Reported By},\"RA\")==true(),1,0),",
				"          Cons = iif(startsWith({Reported By},\"C\")==true(),1,0),",
				"          Outsource = iif(instr({Reported By},\"4way\")!=0,1,iif(instr({Reported By},\"EXT\")!=0,1,iif(instr({Reported By},\"4WAY\")!=0,1,0))),",
				"          {CX I-R} = toDate({Date First Verified})-{Event Date},",
				"          Snapshot = iif(isNull({Date First Verified})==false(),iif(toDate({Date First Verified})>=toDate('10/01/2023','MM/dd/yyyy'),iif({Event Date}<=toDate('10/01/2023','MM/dd/yyyy'),1,0),0),0)) ~> derivedColumn1",
				"derivedColumn1 derive(Abnormal = iif(between({CX I-R}, 0, 28)==true(),1,0)) ~> derivedColumn2",
				"source1 filter(Examination == \"CCHES\" && {Event Date} >= toDate('01/01/2022','MM/dd/yyyy') && toDate({Date First Verified}) >= toDate('01/01/2022','MM/dd/yyyy')) ~> filter2",
				"derivedColumn2, select1 join(select2@{CRIS No} == select1@{CRIS No}",
				"     && select2@{Event Date} <= select1@{Event Date}",
				"     && toDate(select2@{Date First Verified}) <= select1@{Event Date},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> join1",
				"join1 derive({CXR-CCI} = select1@{Event Date}-toDate(select2@{Date First Verified}),",
				"          {CXI-CCR} = toDate(select1@{Date First Verified})-select2@{Event Date},",
				"          {CXI-CCI} = select1@{Event Date}-select2@{Event Date}) ~> derivedColumn3",
				"select3 filter({CXR-CCI}<=28) ~> filter3",
				"derivedColumn3 select(mapColumn(",
				"          {CRIS No} = select1@{CRIS No},",
				"          {Event Key} = select1@{Event Key},",
				"          {Exam Key} = select1@{Exam Key},",
				"          {Trust ID} = select1@{Trust ID},",
				"          {Exam Room ID} = select1@{Exam Room ID},",
				"          {Event Date} = select1@{Event Date},",
				"          {Date First Verified} = select1@{Date First Verified},",
				"          {Reported By} = select1@{Reported By},",
				"          {Patient Type ID} = select1@{Patient Type ID},",
				"          {Age At Event} = select1@{Age At Event},",
				"          {Exam ID} = select1@{Exam ID},",
				"          {CXR-CCI},",
				"          {CXI-CCR},",
				"          {CXI-CCI}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"derivedColumn2, filter3 join(select2@{CRIS No} == select3@{CRIS No}",
				"     && select2@{Event Date} <= select3@{Event Date}",
				"     && toDate(select2@{Date First Verified}) <= select3@{Event Date},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> join2",
				"derivedColumn3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {CRIS No} = select2@{CRIS No},",
				"          {Event Key} = select2@{Event Key},",
				"          {Exam Key} = select2@{Exam Key},",
				"          {Trust ID} = select2@{Trust ID},",
				"          {Exam Room ID} = select2@{Exam Room ID},",
				"          {Event Date} = select2@{Event Date},",
				"          {Date First Verified} = select2@{Date First Verified},",
				"          {Reported By} = select2@{Reported By},",
				"          {Patient Type ID} = select2@{Patient Type ID},",
				"          {Age At Event} = select2@{Age At Event},",
				"          {Exam ID} = select2@{Exam ID},",
				"          Auto,",
				"          {Rep Rad},",
				"          Cons,",
				"          Outsource,",
				"          {CX I-R},",
				"          Snapshot,",
				"          Abnormal,",
				"          {CRIS No.1} = select1@{CRIS No},",
				"          {Event Key.1} = select1@{Event Key},",
				"          {Exam Key.1} = select1@{Exam Key},",
				"          {Trust ID.1} = select1@{Trust ID},",
				"          {Exam Room ID.1} = select1@{Exam Room ID},",
				"          {Event Date.1} = select1@{Event Date},",
				"          {Date First Verified.1} = select1@{Date First Verified},",
				"          {Reported By.1} = select1@{Reported By},",
				"          {Patient Type ID.1} = select1@{Patient Type ID},",
				"          {Age At Event.1} = select1@{Age At Event},",
				"          {Exam ID.1} = select1@{Exam ID},",
				"          {CXR-CCI},",
				"          {CXI-CCR},",
				"          {CXI-CCI}",
				"     )) ~> sink1",
				"join2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {CRIS No} as integer,",
				"          {Event Key} as integer,",
				"          {Exam Key} as integer,",
				"          {Trust ID} as integer,",
				"          {Exam Room ID} as integer,",
				"          {Event Date} as date,",
				"          {Date First Verified} as timestamp,",
				"          {Reported By} as string,",
				"          {Patient Type ID} as long,",
				"          {Age At Event} as string,",
				"          {Exam ID} as integer,",
				"          Auto as integer,",
				"          {Rep Rad} as integer,",
				"          Cons as integer,",
				"          Outsource as integer,",
				"          {CX I-R} as integer,",
				"          Snapshot as integer,",
				"          Abnormal as integer,",
				"          {CRIS No.1} as integer,",
				"          {Event Key.1} as integer,",
				"          {Exam Key.1} as integer,",
				"          {Trust ID.1} as integer,",
				"          {Exam Room ID.1} as integer,",
				"          {Event Date.1} as date,",
				"          {Date First Verified.1} as timestamp,",
				"          {Reported By.1} as string,",
				"          {Patient Type ID.1} as long,",
				"          {Age At Event.1} as string,",
				"          {Exam ID.1} as integer,",
				"          {CXR-CCI.1} as integer,",
				"          {CXI-CCR.1} as integer,",
				"          {CXI-CCI.1} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink3"
			]
		}
	}
}