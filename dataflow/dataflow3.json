{
	"name": "dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlCOREStageStep2",
						"type": "DatasetReference"
					},
					"name": "AzureSQLCoreV3Staging"
				},
				{
					"dataset": {
						"referenceName": "Patient_Type",
						"type": "DatasetReference"
					},
					"name": "PatientType"
				},
				{
					"dataset": {
						"referenceName": "Modality",
						"type": "DatasetReference"
					},
					"name": "Modality"
				},
				{
					"dataset": {
						"referenceName": "Status",
						"type": "DatasetReference"
					},
					"name": "Status"
				},
				{
					"dataset": {
						"referenceName": "Exam",
						"type": "DatasetReference"
					},
					"name": "Exam"
				},
				{
					"dataset": {
						"referenceName": "Exam_Site",
						"type": "DatasetReference"
					},
					"name": "ExamSite"
				},
				{
					"dataset": {
						"referenceName": "Trust",
						"type": "DatasetReference"
					},
					"name": "Trust"
				},
				{
					"dataset": {
						"referenceName": "Referral_Source",
						"type": "DatasetReference"
					},
					"name": "ReferralSource"
				},
				{
					"dataset": {
						"referenceName": "Tat_Type",
						"type": "DatasetReference"
					},
					"name": "TatType"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FYF_ODBC_CORE_v2",
						"type": "DatasetReference"
					},
					"name": "AzureSqlCOREV2"
				}
			],
			"transformations": [
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "MapDrifted2",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "RemoveColumns6"
				},
				{
					"name": "MapDrifted3",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "RemoveColumns1"
				},
				{
					"name": "RemoveColumns2"
				},
				{
					"name": "RemoveColumns3"
				},
				{
					"name": "RemoveColumns4"
				},
				{
					"name": "select6"
				},
				{
					"name": "RemoveColumns5"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "RenameColumn"
				},
				{
					"name": "LookupPatientType"
				},
				{
					"name": "lookupModality"
				},
				{
					"name": "lookupStatus"
				},
				{
					"name": "lookupExam"
				},
				{
					"name": "lookupExamSite"
				},
				{
					"name": "lookup6"
				},
				{
					"name": "lookupReferralSource"
				},
				{
					"name": "lookupTatType"
				},
				{
					"name": "RenameColumn2"
				},
				{
					"name": "MapDrifted4",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "MapDrifted5",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {CRIS No} as integer,",
				"          Accession as string,",
				"          {Ref Src} as string,",
				"          Site as string,",
				"          {Request Date} as date,",
				"          {Event Date} as date,",
				"          {Event Time} as string,",
				"          {On Call} as string,",
				"          PT as string,",
				"          Examination as string,",
				"          {Exam Name} as string,",
				"          Room as string,",
				"          {Start Time} as string,",
				"          {End Time} as string,",
				"          {Exam Key} as integer,",
				"          {Event Key} as integer,",
				"          {Status Code} as string,",
				"          {Booked Date} as timestamp,",
				"          {Booked Time} as string,",
				"          {Creation Date} as timestamp,",
				"          Attended as string,",
				"          Urg as string,",
				"          Modality as string,",
				"          {No of Proc} as integer,",
				"          {Planned Appointment Date} as timestamp,",
				"          {Date First Verified} as timestamp,",
				"          {Time First Verified} as string,",
				"          {Was Planned} as string,",
				"          {Was Scheduled} as string,",
				"          {Was Waiting} as string,",
				"          {Stat Date} as timestamp,",
				"          {Reported By} as string,",
				"          Rank as integer,",
				"          {Age At Event} as string,",
				"          {Status Code.2} as string,",
				"          {Status Date.1} as timestamp,",
				"          {Status Time} as string,",
				"          Modality2 as string,",
				"          {Trust Name} as string,",
				"          Patient_Type as string,",
				"          {Tat Type} as string,",
				"          {Activity.1} as integer,",
				"          {Count of Activty_Demand for Activity.1} as long,",
				"          {ExamSite Code} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> AzureSQLCoreV3Staging",
				"source(output(",
				"          Patient_Type as string,",
				"          Patient_Type_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> PatientType",
				"source(output(",
				"          Modality2 as string,",
				"          {Modality ID} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Modality",
				"source(output(",
				"          {Status Code} as string,",
				"          {Status ID} as integer,",
				"          {Status Category} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Status",
				"source(output(",
				"          {Exam Name} as string,",
				"          {Exam Code} as string,",
				"          {Exam ID} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Exam",
				"source(output(",
				"          {Exam Site} as string,",
				"          {Exam Room} as string,",
				"          {Exam Site Code} as string,",
				"          {Exam Room ID} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ExamSite",
				"source(output(",
				"          {Trust Name} as string,",
				"          {Trust ID} as integer,",
				"          {Trust Name Group} as string,",
				"          {Trust Name Group2} as string,",
				"          {Trust Name Group3} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Trust",
				"source(output(",
				"          {Referral Source} as string,",
				"          {Referral Source ID} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ReferralSource",
				"source(output(",
				"          {Tat Type} as string,",
				"          {Tat Type ID} as integer,",
				"          Target as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> TatType",
				"LookupPatientType derive({Patient Type ID} = toLong(byName('Patient Type ID'))) ~> MapDrifted1",
				"ExamSite derive({ExamSite Code} = toString(byName('ExamSite Code'))) ~> MapDrifted2",
				"lookupTatType select(mapColumn(",
				"          {CRIS No},",
				"          Accession,",
				"          {Ref Src},",
				"          Site,",
				"          {Request Date},",
				"          {Event Date},",
				"          {Event Time},",
				"          {On Call},",
				"          PT,",
				"          Examination,",
				"          {Exam Name},",
				"          Room,",
				"          {ExamSite Code},",
				"          {Start Time},",
				"          {End Time},",
				"          {Exam Key},",
				"          {Event Key},",
				"          {Status Code},",
				"          {Booked Date},",
				"          {Booked Time},",
				"          {Creation Date},",
				"          Attended,",
				"          Urg,",
				"          Modality,",
				"          {No of Proc},",
				"          {Planned Appointment Date},",
				"          {Date First Verified},",
				"          {Time First Verified},",
				"          {Was Planned},",
				"          {Was Scheduled},",
				"          {Was Waiting},",
				"          {Status Time},",
				"          Modality2,",
				"          {Trust Name},",
				"          Patient_Type,",
				"          {Tat Type} = RemoveColumns5@{Tat Type},",
				"          {Status Time2},",
				"          {Patient Type ID},",
				"          {Modality ID},",
				"          {Status ID},",
				"          {Exam ID},",
				"          {Exam Room ID},",
				"          {Trust ID},",
				"          {Referral Source ID},",
				"          {Tat Type ID},",
				"          {Reported By},",
				"          Rank,",
				"          {Status Code} = {Status Code.2},",
				"          {Status Date} = {Status Date.1},",
				"          Activity = {Activity.1},",
				"          {Count of Activty_Demand for Activity} = {Count of Activty_Demand for Activity.1},",
				"          {Stat Date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns6",
				"PatientType derive({Patient Type ID} = toLong(byName('Patient Type ID'))) ~> MapDrifted3",
				"MapDrifted5 select(mapColumn(",
				"          {CRIS No},",
				"          Accession,",
				"          {Ref Src},",
				"          Site,",
				"          {Request Date},",
				"          {Event Date},",
				"          {Event Time},",
				"          {On Call},",
				"          PT,",
				"          Examination,",
				"          {Exam Name},",
				"          Room,",
				"          {ExamSite Code},",
				"          {Start Time},",
				"          {End Time},",
				"          {Exam Key},",
				"          {Event Key},",
				"          {Status Code},",
				"          {Booked Date},",
				"          {Booked Time},",
				"          {Creation Date},",
				"          Attended,",
				"          Urg,",
				"          Modality,",
				"          {No of Proc},",
				"          {Planned Appointment Date},",
				"          {Date First Verified},",
				"          {Time First Verified},",
				"          {Was Planned},",
				"          {Was Scheduled},",
				"          {Was Waiting},",
				"          {Stat Date},",
				"          {Status Time},",
				"          Modality2,",
				"          {Trust Name},",
				"          Patient_Type = AzureSQLCoreV3Staging@Patient_Type,",
				"          {Tat Type},",
				"          {Status Time2},",
				"          {Patient Type ID},",
				"          {Reported By},",
				"          Rank,",
				"          {Status Code.2},",
				"          {Status Date.1},",
				"          {Activity.1},",
				"          {Count of Activty_Demand for Activity.1},",
				"          {Stat Date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
				"lookupStatus select(mapColumn(",
				"          {CRIS No},",
				"          Accession,",
				"          {Ref Src},",
				"          Site,",
				"          {Request Date},",
				"          {Event Date},",
				"          {Event Time},",
				"          {On Call},",
				"          PT,",
				"          Examination,",
				"          {Exam Name},",
				"          Room,",
				"          {ExamSite Code},",
				"          {Start Time},",
				"          {End Time},",
				"          {Exam Key},",
				"          {Event Key},",
				"          {Status Code} = RemoveColumns1@{Status Code},",
				"          {Booked Date},",
				"          {Booked Time},",
				"          {Creation Date},",
				"          Attended,",
				"          Urg,",
				"          Modality,",
				"          {No of Proc},",
				"          {Planned Appointment Date},",
				"          {Date First Verified},",
				"          {Time First Verified},",
				"          {Was Planned},",
				"          {Was Scheduled},",
				"          {Was Waiting},",
				"          {Stat Date},",
				"          {Status Time},",
				"          Modality2 = RemoveColumns1@Modality2,",
				"          {Trust Name},",
				"          Patient_Type,",
				"          {Tat Type},",
				"          {Status Time2},",
				"          {Patient Type ID},",
				"          {Modality ID},",
				"          {Status ID},",
				"          {Reported By},",
				"          Rank,",
				"          {Status Code.2},",
				"          {Status Date.1},",
				"          {Activity.1},",
				"          {Count of Activty_Demand for Activity.1},",
				"          {Stat Date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns2",
				"lookupExam select(mapColumn(",
				"          {CRIS No},",
				"          Accession,",
				"          {Ref Src},",
				"          Site,",
				"          {Request Date},",
				"          {Event Date},",
				"          {Event Time},",
				"          {On Call},",
				"          PT,",
				"          Examination,",
				"          {Exam Name} = RemoveColumns2@{Exam Name},",
				"          Room,",
				"          {ExamSite Code},",
				"          {Start Time},",
				"          {End Time},",
				"          {Exam Key},",
				"          {Event Key},",
				"          {Status Code},",
				"          {Booked Date},",
				"          {Booked Time},",
				"          {Creation Date},",
				"          Attended,",
				"          Urg,",
				"          Modality,",
				"          {No of Proc},",
				"          {Planned Appointment Date},",
				"          {Date First Verified},",
				"          {Time First Verified},",
				"          {Was Planned},",
				"          {Was Scheduled},",
				"          {Was Waiting},",
				"          {Status Time},",
				"          Modality2,",
				"          {Trust Name},",
				"          Patient_Type,",
				"          {Tat Type},",
				"          {Status Time2},",
				"          {Patient Type ID},",
				"          {Modality ID},",
				"          {Status ID},",
				"          {Exam ID},",
				"          {Reported By},",
				"          Rank,",
				"          {Status Code.2},",
				"          {Status Date.1},",
				"          {Activity.1},",
				"          {Count of Activty_Demand for Activity.1},",
				"          {Stat Date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns3",
				"lookupExamSite select(mapColumn(",
				"          {CRIS No},",
				"          Accession,",
				"          {Ref Src},",
				"          Site,",
				"          {Request Date},",
				"          {Event Date},",
				"          {Event Time},",
				"          {On Call},",
				"          PT,",
				"          Examination,",
				"          {Exam Name},",
				"          Room,",
				"          {ExamSite Code} = RemoveColumns3@{ExamSite Code},",
				"          {Start Time},",
				"          {End Time},",
				"          {Exam Key},",
				"          {Event Key},",
				"          {Status Code},",
				"          {Booked Date},",
				"          {Booked Time},",
				"          {Creation Date},",
				"          Attended,",
				"          Urg,",
				"          Modality,",
				"          {No of Proc},",
				"          {Planned Appointment Date},",
				"          {Date First Verified},",
				"          {Time First Verified},",
				"          {Was Planned},",
				"          {Was Scheduled},",
				"          {Was Waiting},",
				"          {Status Time},",
				"          Modality2,",
				"          {Trust Name},",
				"          Patient_Type,",
				"          {Tat Type},",
				"          {Status Time2},",
				"          {Patient Type ID},",
				"          {Modality ID},",
				"          {Status ID},",
				"          {Exam ID},",
				"          {Exam Room ID},",
				"          {Reported By},",
				"          Rank,",
				"          {Status Code.2},",
				"          {Status Date.1},",
				"          {Activity.1},",
				"          {Count of Activty_Demand for Activity.1},",
				"          {Stat Date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns4",
				"lookup6 select(mapColumn(",
				"          {CRIS No},",
				"          Accession,",
				"          {Ref Src},",
				"          Site,",
				"          {Request Date},",
				"          {Event Date},",
				"          {Event Time},",
				"          {On Call},",
				"          PT,",
				"          Examination,",
				"          {Exam Name},",
				"          Room,",
				"          {ExamSite Code},",
				"          {Start Time},",
				"          {End Time},",
				"          {Exam Key},",
				"          {Event Key},",
				"          {Status Code},",
				"          {Booked Date},",
				"          {Booked Time},",
				"          {Creation Date},",
				"          Attended,",
				"          Urg,",
				"          Modality,",
				"          {No of Proc},",
				"          {Planned Appointment Date},",
				"          {Date First Verified},",
				"          {Time First Verified},",
				"          {Was Planned},",
				"          {Was Scheduled},",
				"          {Was Waiting},",
				"          {Status Time},",
				"          Modality2,",
				"          {Trust Name} = RemoveColumns4@{Trust Name},",
				"          Patient_Type,",
				"          {Tat Type},",
				"          {Status Time2},",
				"          {Patient Type ID},",
				"          {Modality ID},",
				"          {Status ID},",
				"          {Exam ID},",
				"          {Exam Room ID},",
				"          {Trust ID},",
				"          {Reported By},",
				"          Rank,",
				"          {Status Code.2},",
				"          {Status Date.1},",
				"          {Activity.1},",
				"          {Count of Activty_Demand for Activity.1},",
				"          {Stat Date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"lookupReferralSource select(mapColumn(",
				"          {CRIS No},",
				"          Accession,",
				"          {Ref Src},",
				"          Site,",
				"          {Request Date},",
				"          {Event Date},",
				"          {Event Time},",
				"          {On Call},",
				"          PT,",
				"          Examination,",
				"          {Exam Name},",
				"          Room,",
				"          {ExamSite Code},",
				"          {Start Time},",
				"          {End Time},",
				"          {Exam Key},",
				"          {Event Key},",
				"          {Status Code},",
				"          {Booked Date},",
				"          {Booked Time},",
				"          {Creation Date},",
				"          Attended,",
				"          Urg,",
				"          Modality,",
				"          {No of Proc},",
				"          {Planned Appointment Date},",
				"          {Date First Verified},",
				"          {Time First Verified},",
				"          {Was Planned},",
				"          {Was Scheduled},",
				"          {Was Waiting},",
				"          {Status Time},",
				"          Modality2,",
				"          {Trust Name},",
				"          Patient_Type,",
				"          {Tat Type},",
				"          {Status Time2},",
				"          {Patient Type ID},",
				"          {Modality ID},",
				"          {Status ID},",
				"          {Exam ID},",
				"          {Exam Room ID},",
				"          {Trust ID},",
				"          {Referral Source ID},",
				"          {Reported By},",
				"          Rank,",
				"          {Status Code.2},",
				"          {Status Date.1},",
				"          {Activity.1},",
				"          {Count of Activty_Demand for Activity.1},",
				"          {Stat Date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns5",
				"MapDrifted4 derive({Status Time2} = lpad(toString({Status Time}),4,\"0\")) ~> DerivedColumn1",
				"MapDrifted3 select(mapColumn(",
				"          Patient_Type,",
				"          {Patient Type ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumn",
				"DerivedColumn1, RenameColumn lookup(AzureSQLCoreV3Staging@Patient_Type == RenameColumn@Patient_Type,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupPatientType",
				"RemoveColumns1, Modality lookup(RemoveColumns1@Modality2 == Modality@Modality2,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupModality",
				"lookupModality, Status lookup(RemoveColumns1@{Status Code} == Status@{Status Code},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupStatus",
				"RemoveColumns2, Exam lookup(Examination == {Exam Code},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupExam",
				"RemoveColumns3, MapDrifted2 lookup(RemoveColumns3@{ExamSite Code} == MapDrifted2@{ExamSite Code},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupExamSite",
				"RemoveColumns4, Trust lookup(RemoveColumns4@{Trust Name} == Trust@{Trust Name},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup6",
				"select6, ReferralSource lookup({Ref Src} == {Referral Source},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupReferralSource",
				"RemoveColumns5, TatType lookup(RemoveColumns5@{Tat Type} == TatType@{Tat Type},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupTatType",
				"MapDrifted2 select(mapColumn(",
				"          {Exam Site},",
				"          {Exam Room},",
				"          {Exam Room ID},",
				"          {ExamSite Code}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumn2",
				"filter1 derive({Reported By} = toString(byName('Reported By'))) ~> MapDrifted4",
				"MapDrifted1 derive({Reported By} = toString(byName('Reported By'))) ~> MapDrifted5",
				"AzureSQLCoreV3Staging filter(Rank==1) ~> filter1",
				"RemoveColumns6 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          each(match(/* All input columns */ true()),",
				"               /* Input name */ $$ = $$)",
				"     )) ~> AzureSqlCOREV2"
			]
		}
	}
}