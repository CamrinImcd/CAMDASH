{
	"name": "dataflow1_copy1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSql_PTL",
						"type": "DatasetReference"
					},
					"name": "AzureSqlPTL"
				},
				{
					"dataset": {
						"referenceName": "Referral_Source",
						"type": "DatasetReference"
					},
					"name": "ReferralSource"
				},
				{
					"dataset": {
						"referenceName": "Exam",
						"type": "DatasetReference"
					},
					"name": "Exam"
				},
				{
					"dataset": {
						"referenceName": "Trust",
						"type": "DatasetReference"
					},
					"name": "Trust"
				},
				{
					"dataset": {
						"referenceName": "Modality",
						"type": "DatasetReference"
					},
					"name": "Modality"
				},
				{
					"dataset": {
						"referenceName": "Exam_Site",
						"type": "DatasetReference"
					},
					"name": "ExamSite"
				},
				{
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSQLPTL_V3_Staging",
						"type": "DatasetReference"
					},
					"name": "AzureSqlPTLV2Staging"
				}
			],
			"transformations": [
				{
					"name": "AddColumns"
				},
				{
					"name": "SelectMostRecent"
				},
				{
					"name": "SortColumns"
				},
				{
					"name": "CreateID"
				},
				{
					"name": "RenameandRemoveCols"
				},
				{
					"name": "lookupReferralSource"
				},
				{
					"name": "lookupExam"
				},
				{
					"name": "DeriveTrust"
				},
				{
					"name": "lookupTrust"
				},
				{
					"name": "deriveModlaityCode"
				},
				{
					"name": "lookupModality"
				},
				{
					"name": "derivedEamsiteCode"
				},
				{
					"name": "lookupExamSite"
				},
				{
					"name": "RemoveCols"
				},
				{
					"name": "deriveBookedDateTime"
				},
				{
					"name": "RenameCols3"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Event Key} as integer,",
				"          {Exam Key} as integer,",
				"          {CRIS Number} as integer,",
				"          {Status Category} as string,",
				"          Referrer as string,",
				"          {Ref Src} as string,",
				"          {Referring Location} as string,",
				"          Examination as string,",
				"          Site as string,",
				"          {Request Date} as timestamp,",
				"          {Event Date} as timestamp,",
				"          {Booked Time} as string,",
				"          {Booked Date} as timestamp,",
				"          {Ref Src2} as string,",
				"          {Postcode L} as string,",
				"          {Postcode R} as string,",
				"          {Creation Date} as timestamp,",
				"          {Event Key2} as integer,",
				"          Attended as string,",
				"          Modality as string,",
				"          Room as string,",
				"          RC as string,",
				"          Urg as integer,",
				"          {Referrer Name} as string,",
				"          {Exam Name} as string,",
				"          {Event Date2} as timestamp,",
				"          {Days Waiting} as integer,",
				"          {Predicted Reset Date} as timestamp,",
				"          {Waiting Time Reset Date} as timestamp,",
				"          {Weeks Waiting} as integer,",
				"          {Planned Appointment Date} as timestamp,",
				"          {Waiting Breach Date} as timestamp,",
				"          {Was Planned} as string,",
				"          {Was Scheduled} as string,",
				"          {Was Waiting} as string,",
				"          CCG as string,",
				"          {D Status} as string,",
				"          {Stat Date} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> AzureSqlPTL",
				"source(output(",
				"          {Referral Source} as string,",
				"          {Referral Source ID} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ReferralSource",
				"source(output(",
				"          {Exam Name} as string,",
				"          {Exam Code} as string,",
				"          {Exam ID} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Exam",
				"source(output(",
				"          {Trust Name} as string,",
				"          {Trust ID} as integer,",
				"          {Trust Name Group} as string,",
				"          {Trust Name Group2} as string,",
				"          {Trust Name Group3} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Trust",
				"source(output(",
				"          Modality2 as string,",
				"          {Modality ID} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Modality",
				"source(output(",
				"          {Exam Site} as string,",
				"          {Exam Room} as string,",
				"          {Exam Site Code} as string,",
				"          {Exam Room ID} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ExamSite",
				"source(output(",
				"          {CRIS No} as integer,",
				"          Accession as string,",
				"          {Ref Src} as string,",
				"          Site as string,",
				"          {Request Date} as date,",
				"          {Event Date} as date,",
				"          {Event Time} as string,",
				"          {On Call} as string,",
				"          PT as string,",
				"          Examination as string,",
				"          {Exam Name} as string,",
				"          Room as string,",
				"          {ExamSite Code} as string,",
				"          {Start Time} as string,",
				"          {End Time} as string,",
				"          {Exam Key} as integer,",
				"          {Event Key} as integer,",
				"          {Status Code} as string,",
				"          {Booked Date} as timestamp,",
				"          {Booked Time} as string,",
				"          {Creation Date} as timestamp,",
				"          Attended as string,",
				"          Urg as string,",
				"          Modality as string,",
				"          {No of Proc} as integer,",
				"          {Planned Appointment Date} as timestamp,",
				"          {Date First Verified} as timestamp,",
				"          {Time First Verified} as string,",
				"          {Was Planned} as string,",
				"          {Was Scheduled} as string,",
				"          {Was Waiting} as string,",
				"          {Stat Date} as timestamp,",
				"          {Status Date} as timestamp,",
				"          Modality2 as string,",
				"          {Trust Name} as string,",
				"          Patient_Type as string,",
				"          {Tat Type} as string,",
				"          Activity as integer,",
				"          {Count of Activty_Demand for Activity} as long,",
				"          {Status Time2} as string,",
				"          {Patient Type ID} as long,",
				"          {Modality ID} as integer,",
				"          {Status ID} as integer,",
				"          {Exam ID} as integer,",
				"          {Exam Room ID} as integer,",
				"          {Trust ID} as integer,",
				"          {Referral Source ID} as integer,",
				"          {Tat Type ID} as integer,",
				"          {Reported By} as string,",
				"          Rank as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> source1",
				"AzureSqlPTL derive({5 Weeks Wait} = iif({Weeks Waiting}>=6,1,0),",
				"          {Booked Datetime} = toString(null()),",
				"          {6 Weeks Wait} = toString(null()),",
				"          {Stat Date} = toDate({Stat Date})) ~> AddColumns",
				"CreateID filter(rank==1) ~> SelectMostRecent",
				"AddColumns sort(desc({Stat Date}, true)) ~> SortColumns",
				"SortColumns rank(desc({Stat Date}, true),",
				"     output(rank as long)) ~> CreateID",
				"SelectMostRecent select(mapColumn(",
				"          {Event Key},",
				"          {Exam Key},",
				"          {CRIS Number},",
				"          {Status Category},",
				"          {Ref Src},",
				"          Examination,",
				"          Site,",
				"          {Request Date},",
				"          {Event Date},",
				"          {Booked Time},",
				"          {Booked Date},",
				"          {Ref Src2},",
				"          {Creation Date},",
				"          Attended,",
				"          Modality,",
				"          Room,",
				"          Urg,",
				"          {Exam Name},",
				"          {Days Waiting},",
				"          {Predicted Reset Date},",
				"          {Waiting Time Reset Date},",
				"          {Weeks Waiting},",
				"          {Planned Appointment Date},",
				"          {Waiting Breach Date},",
				"          {Was Planned},",
				"          {Was Scheduled},",
				"          {Was Waiting},",
				"          {Stat Date},",
				"          {5 Weeks Wait},",
				"          {Booked Datetime},",
				"          {6 Weeks Wait}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameandRemoveCols",
				"RenameandRemoveCols, ReferralSource lookup({Ref Src} == {Referral Source},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupReferralSource",
				"lookupReferralSource, Exam lookup(Examination == {Exam Code},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupExam",
				"lookupExamSite derive(Site = iif ({Site} == \"5HA16\", \"LUHFT\", iif ({Site} == \"5NL93\", \"LUHFT\", iif (left({Site},3) == \"REM\", \"LUHFT\", iif (left({Site},3) == \"RQ6\", \"LUHFT\",  iif (left({Site},3) == \"RQ6\", \"LUHFT\", iif (left({Site},3) == \"RQ6\", \"LUHFT\", iif (left({Site},3) == \"RQ6\", \"LUHFT\", iif (left({Site},3) == \"RBL\", \"WUTH\", iif (left({Site},3) == \"RBN\", \"STHK\", iif (left({Site},3) == \"RBQ\", \"LHCH\", iif (left({Site},3) == \"RBS\", \"Alder Hey\", iif (left({Site},3) == \"RBT\", \"MCH\", iif (left({Site},3) == \"REN\", \"CCC\" , iif (left({Site},3) == \"REP\", \"Womens\", iif (left({Site},3) == \"RET\", \"TWC\", iif (left({Site},3) == \"RJR\", \"COCH\", iif (left({Site},3) == \"RVY\", \"S&O\", iif (left({Site},3) == \"RWW\", \"WHH\", {Site}))))))))))))))))))) ~> DeriveTrust",
				"DeriveTrust, Trust lookup(Site == {Trust Name},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupTrust",
				"lookupExam derive(Modality = iif({Modality} == \"R\", \"Plain X-Ray\", iif({Modality} == \"A\", \"IR\", iif({Modality} == \"B\", \"Mammo\", iif({Modality} == \"C\", \"CT\", iif({Modality} == \"M\", \"MRI\", iif({Modality} == \"F\", \"Fluoro\", iif({Modality} == \"U\", \"NOUS\", iif({Modality} == \"Z\", \"Additional Workload\", iif({Modality} == \"O\", \"Obstetrics\", iif({Modality} == \"N\", \"Nuc Med\", iif({Modality} == \"H\", \"Cardio\", iif({Modality} == \"S\", \"DEXA\", iif({Modality} == \"Y\", \"Med Phys\", iif({Modality} == \"E\", \"Endo\", iif({Modality} == \"D\", \"Doppler\", \"other\")))))))))))))))) ~> deriveModlaityCode",
				"deriveModlaityCode, Modality lookup(Modality == Modality2,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupModality",
				"lookupModality derive(Room = concat({Site},{Room})) ~> derivedEamsiteCode",
				"derivedEamsiteCode, ExamSite lookup(Room == {Exam Site Code},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupExamSite",
				"lookupTrust select(mapColumn(",
				"          {Event Key},",
				"          {Exam Key},",
				"          {CRIS Number},",
				"          {Status Category},",
				"          {Request Date},",
				"          {Event Date},",
				"          {Booked Time},",
				"          {Booked Date},",
				"          {Creation Date},",
				"          Attended,",
				"          Urg,",
				"          {Days Waiting},",
				"          {Predicted Reset Date},",
				"          {Waiting Time Reset Date},",
				"          {Weeks Waiting},",
				"          {Planned Appointment Date},",
				"          {Waiting Breach Date},",
				"          {Was Planned},",
				"          {Was Scheduled},",
				"          {Was Waiting},",
				"          {Stat Date},",
				"          {5 Weeks Wait},",
				"          {Booked Datetime},",
				"          {6 Weeks Wait},",
				"          {Referral Source ID},",
				"          {Exam ID},",
				"          {Modality ID},",
				"          {Exam Room ID},",
				"          {Trust ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveCols",
				"RemoveCols derive({Booked Date} = toTimestamp(concatWS(\" \", left(toString({Booked Date}),10), concatWS(\":\",left({Booked Time}, 2), concatWS(\":\",right({Booked Time}, 2),\"00\"))))) ~> deriveBookedDateTime",
				"lookup1 select(mapColumn(",
				"          {Event Key} = RemoveCols@{Event Key},",
				"          {Exam Key} = RemoveCols@{Exam Key},",
				"          {CRIS Number},",
				"          {Status Category},",
				"          {Request Date} = RemoveCols@{Request Date},",
				"          {Event Date} = RemoveCols@{Event Date},",
				"          {Booked Date Time} = deriveBookedDateTime@{Booked Date},",
				"          {Creation Date} = RemoveCols@{Creation Date},",
				"          Attended = RemoveCols@Attended,",
				"          Urg = RemoveCols@Urg,",
				"          {Days Waiting},",
				"          {Predicted Reset Date},",
				"          {Waiting Time Reset Date},",
				"          {Weeks Waiting},",
				"          {Planned Appointment Date} = RemoveCols@{Planned Appointment Date},",
				"          {Waiting Breach Date},",
				"          {Was Planned} = RemoveCols@{Was Planned},",
				"          {Was Scheduled} = RemoveCols@{Was Scheduled},",
				"          {Was Waiting} = RemoveCols@{Was Waiting},",
				"          {Stat Date} = RemoveCols@{Stat Date},",
				"          {5 Weeks Wait},",
				"          {Booked Datetime},",
				"          {6 Weeks Wait},",
				"          {Referral Source ID} = RemoveCols@{Referral Source ID},",
				"          {Exam ID} = RemoveCols@{Exam ID},",
				"          {Modality ID} = RemoveCols@{Modality ID},",
				"          {Exam Room ID} = RemoveCols@{Exam Room ID},",
				"          {Trust ID} = RemoveCols@{Trust ID},",
				"          {Status Code}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameCols3",
				"deriveBookedDateTime, filter1 lookup(RemoveCols@{Exam Key} == source1@{Exam Key},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"source1 filter(Rank==1) ~> filter1",
				"RenameCols3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> AzureSqlPTLV2Staging"
			]
		}
	}
}