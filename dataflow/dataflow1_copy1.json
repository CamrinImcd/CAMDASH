{
	"name": "dataflow1_copy1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSql_PTL",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Referral_Source",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "Exam",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "Trust",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "Modality",
						"type": "DatasetReference"
					},
					"name": "source5"
				},
				{
					"dataset": {
						"referenceName": "Exam_Site",
						"type": "DatasetReference"
					},
					"name": "source6"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlPTL_V2_Staging",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "rank1"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "Trust"
				},
				{
					"name": "lookup3"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "lookup4"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "lookup5"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Event Key} as integer,",
				"          {Exam Key} as integer,",
				"          {CRIS Number} as integer,",
				"          {Status Category} as string,",
				"          Referrer as string,",
				"          {Ref Src} as string,",
				"          {Referring Location} as string,",
				"          Examination as string,",
				"          Site as string,",
				"          {Request Date} as timestamp,",
				"          {Event Date} as timestamp,",
				"          {Booked Time} as string,",
				"          {Booked Date} as timestamp,",
				"          {Ref Src2} as string,",
				"          {Postcode L} as string,",
				"          {Postcode R} as string,",
				"          {Creation Date} as timestamp,",
				"          {Event Key2} as integer,",
				"          Attended as string,",
				"          Modality as string,",
				"          Room as string,",
				"          RC as string,",
				"          Urg as integer,",
				"          {Referrer Name} as string,",
				"          {Exam Name} as string,",
				"          {Event Date2} as timestamp,",
				"          {Days Waiting} as integer,",
				"          {Predicted Reset Date} as timestamp,",
				"          {Waiting Time Reset Date} as timestamp,",
				"          {Weeks Waiting} as integer,",
				"          {Planned Appointment Date} as timestamp,",
				"          {Waiting Breach Date} as timestamp,",
				"          {Was Planned} as string,",
				"          {Was Scheduled} as string,",
				"          {Was Waiting} as string,",
				"          CCG as string,",
				"          {D Status} as string,",
				"          {Stat Date} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          {Referral Source} as string,",
				"          {Referral Source ID} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source(output(",
				"          {Exam Name} as string,",
				"          {Exam Code} as string,",
				"          {Exam ID} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source3",
				"source(output(",
				"          {Trust Name} as string,",
				"          {Trust ID} as integer,",
				"          {Trust Name Group} as string,",
				"          {Trust Name Group2} as string,",
				"          {Trust Name Group3} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source4",
				"source(output(",
				"          Modality2 as string,",
				"          {Modality ID} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source5",
				"source(output(",
				"          {Exam Site} as string,",
				"          {Exam Room} as string,",
				"          {Exam Site Code} as string,",
				"          {Exam Room ID} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source6",
				"source1 derive({5 Weeks Wait} = iif({Weeks Waiting}>=6,1,0),",
				"          {Booked Datetime} = toString(null()),",
				"          {6 Weeks Wait} = toString(null()),",
				"          {Stat Date} = toDate({Stat Date})) ~> derivedColumn1",
				"rank1 filter(rank==1) ~> filter1",
				"derivedColumn1 sort(desc({Stat Date}, true)) ~> sort1",
				"sort1 rank(desc({Stat Date}, true),",
				"     output(rank as long)) ~> rank1",
				"filter1 select(mapColumn(",
				"          {Event Key},",
				"          {Exam Key},",
				"          {CRIS Number},",
				"          {Status Category},",
				"          {Ref Src},",
				"          Examination,",
				"          Site,",
				"          {Request Date},",
				"          {Event Date},",
				"          {Booked Time},",
				"          {Booked Date},",
				"          {Ref Src2},",
				"          {Creation Date},",
				"          Attended,",
				"          Modality,",
				"          Room,",
				"          Urg,",
				"          {Exam Name},",
				"          {Days Waiting},",
				"          {Predicted Reset Date},",
				"          {Waiting Time Reset Date},",
				"          {Weeks Waiting},",
				"          {Planned Appointment Date},",
				"          {Waiting Breach Date},",
				"          {Was Planned},",
				"          {Was Scheduled},",
				"          {Was Waiting},",
				"          {Stat Date},",
				"          {5 Weeks Wait},",
				"          {Booked Datetime},",
				"          {6 Weeks Wait}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, source2 lookup({Ref Src} == {Referral Source},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1, source3 lookup(Examination == {Exam Code},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"lookup5 derive(Site = iif ({Site} == \"5HA16\", \"LUHFT\", iif ({Site} == \"5NL93\", \"LUHFT\", iif (left({Site},3) == \"REM\", \"LUHFT\", iif (left({Site},3) == \"RQ6\", \"LUHFT\",  iif (left({Site},3) == \"RQ6\", \"LUHFT\", iif (left({Site},3) == \"RQ6\", \"LUHFT\", iif (left({Site},3) == \"RQ6\", \"LUHFT\", iif (left({Site},3) == \"RBL\", \"WUTH\", iif (left({Site},3) == \"RBN\", \"STHK\", iif (left({Site},3) == \"RBQ\", \"LHCH\", iif (left({Site},3) == \"RBS\", \"Alder Hey\", iif (left({Site},3) == \"RBT\", \"MCH\", iif (left({Site},3) == \"REN\", \"CCC\" , iif (left({Site},3) == \"REP\", \"Womens\", iif (left({Site},3) == \"RET\", \"TWC\", iif (left({Site},3) == \"RJR\", \"COCH\", iif (left({Site},3) == \"RVY\", \"S&O\", iif (left({Site},3) == \"RWW\", \"WHH\", {Site}))))))))))))))))))) ~> Trust",
				"Trust, source4 lookup(Site == {Trust Name},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup3",
				"lookup2 derive(Modality = iif({Modality} == \"R\", \"Plain X-Ray\", iif({Modality} == \"A\", \"IR\", iif({Modality} == \"B\", \"Mammo\", iif({Modality} == \"C\", \"CT\", iif({Modality} == \"M\", \"MRI\", iif({Modality} == \"F\", \"Fluoro\", iif({Modality} == \"U\", \"NOUS\", iif({Modality} == \"Z\", \"Additional Workload\", iif({Modality} == \"O\", \"Obstetrics\", iif({Modality} == \"N\", \"Nuc Med\", iif({Modality} == \"H\", \"Cardio\", iif({Modality} == \"S\", \"DEXA\", iif({Modality} == \"Y\", \"Med Phys\", iif({Modality} == \"E\", \"Endo\", iif({Modality} == \"D\", \"Doppler\", \"other\")))))))))))))))) ~> derivedColumn2",
				"derivedColumn2, source5 lookup(Modality == Modality2,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup4",
				"lookup4 derive(Room = concat({Site},{Room})) ~> derivedColumn3",
				"derivedColumn3, source6 lookup(Room == {Exam Site Code},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup5",
				"lookup3 select(mapColumn(",
				"          {Event Key},",
				"          {Exam Key},",
				"          {CRIS Number},",
				"          {Status Category},",
				"          {Request Date},",
				"          {Event Date},",
				"          {Booked Time},",
				"          {Booked Date},",
				"          {Creation Date},",
				"          Attended,",
				"          Urg,",
				"          {Days Waiting},",
				"          {Predicted Reset Date},",
				"          {Waiting Time Reset Date},",
				"          {Weeks Waiting},",
				"          {Planned Appointment Date},",
				"          {Waiting Breach Date},",
				"          {Was Planned},",
				"          {Was Scheduled},",
				"          {Was Waiting},",
				"          {Stat Date},",
				"          {5 Weeks Wait},",
				"          {Booked Datetime},",
				"          {6 Weeks Wait},",
				"          {Referral Source ID},",
				"          {Exam ID},",
				"          {Modality ID},",
				"          {Exam Room ID},",
				"          {Trust ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive({Booked Date} = toTimestamp(concatWS(\" \", left(toString({Booked Date}),10), concatWS(\":\",left({Booked Time}, 2), concatWS(\":\",right({Booked Time}, 2),\"00\"))))) ~> derivedColumn4",
				"derivedColumn4 select(mapColumn(",
				"          {Event Key},",
				"          {Exam Key},",
				"          {CRIS Number},",
				"          {Status Category},",
				"          {Request Date},",
				"          {Event Date},",
				"          {Booked Date Time} = {Booked Date},",
				"          {Creation Date},",
				"          Attended,",
				"          Urg,",
				"          {Days Waiting},",
				"          {Predicted Reset Date},",
				"          {Waiting Time Reset Date},",
				"          {Weeks Waiting},",
				"          {Planned Appointment Date},",
				"          {Waiting Breach Date},",
				"          {Was Planned},",
				"          {Was Scheduled},",
				"          {Was Waiting},",
				"          {Stat Date},",
				"          {5 Weeks Wait},",
				"          {Booked Datetime},",
				"          {6 Weeks Wait},",
				"          {Referral Source ID},",
				"          {Exam ID},",
				"          {Modality ID},",
				"          {Exam Room ID},",
				"          {Trust ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Event Key} as integer,",
				"          {Exam Key} as integer,",
				"          {CRIS Number} as integer,",
				"          {Status Category} as string,",
				"          Referrer as string,",
				"          {Ref Src} as string,",
				"          {Referring Location} as string,",
				"          Examination as string,",
				"          Site as string,",
				"          {Request Date} as timestamp,",
				"          {Event Date} as timestamp,",
				"          {Booked Time} as string,",
				"          {Booked Date} as timestamp,",
				"          {Ref Src2} as string,",
				"          {Postcode L} as string,",
				"          {Postcode R} as string,",
				"          {Creation Date} as timestamp,",
				"          {Event Key2} as integer,",
				"          Attended as string,",
				"          Modality as string,",
				"          Room as string,",
				"          RC as string,",
				"          Urg as integer,",
				"          {Referrer Name} as string,",
				"          {Exam Name} as string,",
				"          {Event Date2} as timestamp,",
				"          {Days Waiting} as integer,",
				"          {Predicted Reset Date} as timestamp,",
				"          {Waiting Time Reset Date} as timestamp,",
				"          {Weeks Waiting} as integer,",
				"          {Planned Appointment Date} as timestamp,",
				"          {Waiting Breach Date} as timestamp,",
				"          {Was Planned} as string,",
				"          {Was Scheduled} as string,",
				"          {Was Waiting} as string,",
				"          CCG as string,",
				"          {D Status} as string,",
				"          {Stat Date} as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}